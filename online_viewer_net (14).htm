<!DOCTYPE html>
<html lang="ms">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kejohanan Bola Sepak Premier</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600;700&amp;family=Poppins:wght@300;400;600;700&amp;display=swap" rel="stylesheet"/>
    <style>
        /* Definisi pembolehubah CSS untuk warna dan gaya yang konsisten */
        :root {
            --primary-color: #0056b3; /* Biru gelap untuk aksen */
            --secondary-color: #f8f9fa; /* Kelabu muda untuk latar belakang */
            --text-color: #333;
            --header-bg: #007bff; /* Biru utama untuk tajuk */
            --tab-active-bg: #fff; /* Putih untuk latar belakang tab aktif */
            --tab-inactive-bg: #e9ecef; /* Kelabu muda untuk latar belakang tab tidak aktif (tidak digunakan untuk tab nav utama) */
            --border-color: #dee2e6;
            --success-color: #28a745; /* Hijau untuk kejayaan/menang */
            --danger-color: #dc3545;
            --warning-color: #ffc107;
            --info-color: #17a2b8;
            --qualified-bg: #d5ecdb; /* Hijau lembut yang diminta */
            --qualified-text: #155724; /* Hijau gelap */
            --upcoming-bg: #e2e3e5; /* Kelabu muda untuk perlawanan akan datang */
            --upcoming-text: #6c757d; /* Kelabu gelap */
            --nav-link-hover: #004085; /* Darker blue for nav link hover (original) */
            --nav-active-text: var(--primary-color); /* Biru gelap untuk teks tab aktif */
        }

        /* Gaya asas untuk badan dokumen */
        html, body {
            height: 100%; /* Penting untuk kedudukan sticky berfungsi relatif kepada viewport */
            min-height: 100vh; /* Memastikan ketinggian viewport penuh */
            margin: 0;
            padding: 0;
            font-family: 'Inter', 'Poppins', sans-serif; /* Menggunakan Inter sebagai fon utama */
            background-color: var(--secondary-color);
            color: var(--text-color);
            line-height: 1.6;
            overflow-x: hidden; /* Mencegah tatalan mendatar */
        }

        /* Gaya untuk kontena utama */
        .container {
            max-width: 1200px;
            margin: 20px auto;
            padding: 0 20px;
        }

        /* Gaya untuk tajuk utama (header) - Menggunakan Flexbox untuk penjajaran tengah */
        header {
            background-color: var(--header-bg);
            color: #fff;
            padding: 25px 0;
            text-align: center;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            position: relative;
            border-bottom-left-radius: 15px; /* Sudut bulat */
            border-bottom-right-radius: 15px; /* Sudut bulat */

            /* PENTING: Flexbox untuk menjajarkan kandungan secara menegak dan mendatar */
            display: flex;
            align-items: center; /* Menjajarkan item secara menegak di tengah */
            justify-content: center; /* Menjajarkan kandungan utama secara mendatar di tengah */
        }

        header h1 {
            margin: 0;
            font-size: 2.8em;
            font-weight: 700;
        }

        header p {
            margin: 0;
            font-size: 1.2em;
            opacity: 0.9;
        }

        /* Gaya untuk logo di tajuk - PENTING: Logo kekal di sebelah kiri */
        .header-logo {
            position: absolute; /* Mengeluarkan elemen dari aliran normal dokumen */
            left: 20px; /* Jarak dari kiri */
            top: 50%; /* Jajarkan tengah secara menegak */
            transform: translateY(-50%); /* Laraskan untuk menjajarkan tengah dengan tepat */
            height: 80px;
            width: auto;
            border-radius: 50%; /* Logo bulat */
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }

        /* Gaya untuk maklumat pengguna di tajuk (untuk admin) */
        .header-user-info {
            position: absolute;
            right: 20px;
            top: 25px;
            font-size: 0.9em;
            display: none; /* Tersembunyi secara lalai, ditunjukkan apabila log masuk */
        }

        .header-user-info span {
            font-weight: 600;
            margin-right: 5px;
        }

        .header-user-info button {
            background: none;
            border: 1px solid rgba(255,255,255,0.7);
            color: #fff;
            padding: 5px 10px;
            border-radius: 8px; /* Sudut bulat */
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        .header-user-info button:hover {
            background-color: rgba(255,255,255,0.2);
        }

        /* Gaya untuk navigasi tab - PENTING: Menu navigasi kekal di atas apabila menatal */
        nav {
            background-color: var(--header-bg); /* Nav bar background kekal biru */
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
            position: sticky; /* Ini membuat menu terapung */
            top: 0; /* Ini melekatkan menu di bahagian atas skrin */
            z-index: 1000; /* Pastikan ia berada di atas elemen lain */
            width: 100%; /* Pastikan lebar penuh */
            padding: 0; /* Tiada padding pada nav, tab akan menguruskan padding sendiri */
            display: flex; /* Gunakan flex untuk menjajarkan ul di tengah */
            justify-content: center;
            align-items: center;
            border-bottom: none; /* Tiada border untuk nav itu sendiri */
            border-bottom-left-radius: 0;
            border-bottom-right-radius: 0;
            min-height: 60px; /* Added for a more defined bar */
            position: relative; /* For positioning mobile nav logo */
        }

        /* New: Make nav bar fixed when mobile overlay is active */
        nav.nav-fixed-on-mobile {
            position: fixed; /* Override sticky when mobile menu is open */
            top: 0;
            width: 100%;
            z-index: 998; /* Below nav-overlay (999) and hamburger (1001/1002) */
        }

        /* New: Mobile nav logo display */
        .nav-mobile-logo-display {
            display: none; /* Hidden by default */
            position: absolute;
            left: 20px;
            top: 50%;
            transform: translateY(-50%);
            height: 40px; /* Smaller size for nav */
            width: auto;
            border-radius: 50%;
            box-shadow: 0 1px 3px rgba(0,0,0,0.2);
            z-index: 1001; /* Above nav links, below hamburger */
        }

        nav ul {
            list-style: none;
            padding: 0;
            margin: 0;
            display: flex;
            justify-content: center; /* Menjajarkan tab sebenar di tengah */
            flex-wrap: wrap;
            width: 100%; /* Mengisi lebar penuh nav */
        }

        nav ul li {
            position: relative;
        }

        nav ul li a {
            display: block;
            padding: 18px 25px;
            text-decoration: none;
            font-weight: 600;
            transition: background-color 0.3s ease, color 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.8px;
            border-radius: 0;
            margin: 0;
            position: relative;

            /* Gaya lalai (tidak aktif): kekal biru seperti nav bar */
            background-color: var(--header-bg);
            color: #fff; /* Teks putih */
        }

        nav ul li a:hover {
            background-color: var(--nav-link-hover); /* Darker blue on hover */
            color: #fff;
        }

        nav ul li a.active {
            background-color: var(--tab-active-bg); /* Latar belakang aktif: putih */
            color: var(--nav-active-text); /* Warna teks aktif: biru gelap */
            font-weight: 700;
            box-shadow: 0 -2px 5px rgba(0,0,0,0.1); /* Bayangan halus untuk tab aktif */
            border-bottom: none; /* Pastikan tiada border-bottom */
        }

        /* Hamburger menu icon */
        .hamburger-menu {
            display: none; /* Hidden by default on desktop */
            position: absolute; /* Default position relative to nav, so it moves with sticky nav */
            right: 20px;
            top: 50%;
            transform: translateY(-50%);
            width: 30px;
            height: 20px;
            cursor: pointer;
            flex-direction: column;
            justify-content: space-between;
            z-index: 1002; /* Above nav links and mobile logo */
            transition: all 0.3s ease-in-out; /* Smooth transition for position changes */
            background-color: var(--header-bg); /* Contrast background */
            padding: 5px;
            border-radius: 5px;
        }

        /* When overlay is active, fix the hamburger menu position */
        .hamburger-menu.active-overlay {
            position: fixed; /* Fix position relative to viewport when mobile menu is open */
            top: 25px; /* Adjust as needed */
            right: 20px; /* Adjust as needed */
            transform: translateY(0); /* Reset transform if needed */
            z-index: 1002; /* Ensure it's above the overlay */
        }

        .hamburger-menu span {
            display: block;
            width: 100%;
            height: 3px;
            background-color: #fff;
            border-radius: 2px;
            transition: all 0.3s ease-in-out;
        }

        /* Animation for hamburger icon when active */
        .hamburger-menu.active span:nth-child(1) {
            transform: translateY(8px) rotate(45deg);
        }
        .hamburger-menu.active span:nth-child(2) {
            opacity: 0;
        }
        .hamburger-menu.active span:nth-child(3) {
            transform: translateY(-8px) rotate(-45deg);
        }

        /* Mobile nav off-canvas overlay */
        .nav-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7); /* Darker semi-transparent overlay */
            z-index: 999;
            display: flex;
            justify-content: flex-start; /* Align menu to the left */
            visibility: hidden;
            opacity: 0;
            transition: opacity 0.3s ease, visibility 0.3s ease;
        }

        .nav-overlay.active {
            visibility: visible;
            opacity: 1;
        }

        .nav-overlay ul {
            flex-direction: column;
            width: 80%; /* Slightly wider off-canvas menu */
            max-width: 320px; /* Increased max-width */
            background-color: var(--header-bg);
            height: 100%; /* Make it fill the height of the overlay */
            padding: 30px 0; /* Increased padding */
            box-shadow: 2px 0 15px rgba(0,0,0,0.7); /* Stronger shadow */
            transform: translateX(-100%); /* Start off-screen to the left */
            transition: transform 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94); /* Smoother transition */
            overflow-y: auto; /* Enable scrolling for long menus */
            justify-content: flex-start; /* Align menu items to top */
        }

        .nav-overlay.active ul {
            transform: translateX(0); /* Slide in */
        }

        .nav-overlay ul li {
            margin-bottom: 10px; /* Added vertical spacing between menu items */
            width: 100%;
        }

        .nav-overlay ul li:last-child {
            margin-bottom: 0; /* No margin for the last item */
        }

        .nav-overlay ul li a {
            /* Gaya lalai untuk item menu mudah alih */
            background-color: transparent; /* Kekal transparent pada latar belakang overlay biru */
            color: #fff; /* Teks putih */
            padding: 15px 30px;
            width: 100%;
            text-align: left;
            font-size: 1.15em;
            border-radius: 0;
            transition: background-color 0.3s ease, border-left-color 0.3s ease;
            box-sizing: border-box;
            border-left: 5px solid transparent; /* Border kiri untuk aktif */
        }

        .nav-overlay ul li a:hover {
            background-color: var(--nav-link-hover);
        }

        .nav-overlay ul li a.active {
            background-color: var(--tab-active-bg); /* Latar belakang aktif: putih untuk mobile link */
            color: var(--nav-active-text); /* Warna teks aktif: biru gelap untuk mobile link */
            border-left-color: var(--nav-active-text); /* Border kiri warna biru gelap */
        }


        /* Gaya untuk kandungan tab */
        .tab-content {
            display: none;
            padding: 30px;
            background-color: #fff;
            border-radius: 12px; /* Sudut bulat */
            box-shadow: 0 4px 15px rgba(0,0,0,0.08);
            margin-top: 20px;
            animation: fadeIn 0.5s ease-in-out;
        }

        .tab-content.active {
            display: block;
        }

        /* Animasi pudar masuk */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        h2 {
            color: var(--header-bg);
            text-align: center;
            margin-bottom: 30px;
            font-size: 2.5em;
            font-weight: 700;
        }

        h3 {
            color: var(--primary-color);
            margin-bottom: 20px;
            font-size: 1.8em;
            font-weight: 600;
        }

        /* Bahagian Laman Utama */
        .home-section {
            text-align: center;
        }
        .home-section img {
            max-width: 100%;
            height: auto;
            border-radius: 10px;
            margin-bottom: 25px;
            box-shadow: 0 4px 10px rgba(0,0,0,0.1);
        }
        .home-section p {
            font-size: 1.15em;
            max-width: 800px;
            margin: 0 auto 20px auto;
        }
        .cta-buttons button {
            background-color: var(--primary-color);
            color: #fff;
            border: none;
            padding: 12px 25px;
            font-size: 1.1em;
            border-radius: 8px; /* Sudut bulat */
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.2s ease;
            margin: 0 10px;
            font-weight: 600;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        .cta-buttons button:hover {
            background-color: #004085;
            transform: translateY(-3px);
        }

        /* Bahagian Pengenalan - Paparan Pasukan */
        .team-list {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 20px;
            margin-top: 30px;
        }

        .team-card {
            background-color: var(--secondary-color);
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0,0,0,0.08);
            padding: 15px;
            text-align: center;
            width: 180px;
            transition: transform 0.2s ease;
            position: relative; /* Untuk pautan info */
        }

        .team-card:hover {
            transform: translateY(-5px);
        }

        .team-card img {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border-radius: 50%;
            margin-bottom: 10px;
            border: 3px solid var(--primary-color);
        }

        .team-card h4 {
            margin: 0;
            font-size: 1.1em;
            color: var(--primary-color);
        }

        .team-info-link {
            display: block; /* Make it a block element */
            margin-top: 10px; /* Space below team name */
            text-align: center; /* Center align the link */
            background-color: var(--info-color);
            color: white;
            padding: 5px 8px;
            border-radius: 5px;
            font-size: 0.75em;
            text-decoration: none;
            transition: background-color 0.2s ease;
            cursor: pointer;
            width: fit-content; /* Make button width fit content */
            margin-left: auto; /* Center the button */
            margin-right: auto; /* Center the button */
        }

        .team-info-link:hover {
            background-color: #117a8b;
        }


        /* Countdown */
        .countdown-section {
            text-align: center;
            margin-top: 30px;
            padding: 20px;
            background-color: #eaf3fe;
            border-radius: 10px;
            border: 1px solid #a7d3ff;
        }
        .countdown-timer {
            font-size: 3em;
            font-weight: 700;
            color: var(--header-bg);
            margin: 20px 0;
        }
        .countdown-message {
            font-size: 1.2em;
            color: var(--primary-color);
            font-weight: 600;
        }


        /* Jadual Kedudukan */
        .standings-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 30px;
            background-color: #fff;
            border-radius: 10px; /* Sudut bulat */
            overflow: hidden; /* Memastikan sudut bulat */
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        }

        .standings-table th, .standings-table td {
            padding: 15px 12px;
            text-align: left;
            border-bottom: 1px solid var(--border-color);
        }

        .standings-table th {
            background-color: var(--primary-color);
            color: #fff;
            text-transform: uppercase;
            font-weight: 600;
            letter-spacing: 0.5px;
            font-size: 0.9em;
        }

        /* Semua baris kini menggunakan warna latar yang sama */
        .standings-table tbody tr {
            background-color: #f6f9fc;
        }

        .standings-table tbody tr:hover {
            background-color: #e9f0f7;
            cursor: pointer;
        }

        .standings-table td.team-name {
            font-weight: 600;
            color: var(--primary-color);
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .standings-table td.team-name img {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            object-fit: cover;
            border: 1px solid #eee;
        }

        .standings-table .qualified {
            background-color: var(--qualified-bg) !important; /* Guna !important untuk override */
            color: var(--qualified-text);
            font-weight: 700;
        }

        /* Jadual Perlawanan - Diubah untuk paparan satu demi satu */
        .match-fixtures {
            display: flex; /* Menggunakan flexbox untuk menyusun item secara menegak */
            flex-direction: column;
            gap: 20px; /* Ruang antara setiap kad perlawanan */
            margin-top: 30px;
        }

        .match-card {
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0,0,0,0.08);
            padding: 20px;
            text-align: center;
            display: flex; /* Menggunakan flexbox untuk susun atur dalaman */
            flex-direction: column; /* Menyusun elemen dalam kad secara menegak */
            align-items: center; /* Menjajarkan kandungan tengah secara mendatar */
            justify-content: space-between;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            width: 100%; /* Memastikan kad mengambil lebar penuh */
            box-sizing: border-box; /* Sertakan padding dalam lebar */
        }

        .match-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 15px rgba(0,0,0,0.12);
        }

        .match-card.played {
            border-left: 5px solid var(--success-color); /* Green border for played matches */
        }

        .match-card.upcoming {
            border-left: 5px solid var(--upcoming-text);
            background-color: var(--upcoming-bg);
            color: var(--upcoming-text);
        }

        .match-card .match-date-time {
            font-size: 0.9em;
            color: #777;
            margin-bottom: 15px; /* Ruang lebih di bawah tarikh/masa */
        }

        /* New: Container for team names and 'vs' on one line */
        .match-card .teams-line {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 100%;
            gap: 15px; /* Space between team name blocks and 'vs' */
            flex-wrap: wrap; /* Allow wrapping on small screens */
            margin-bottom: 5px; /* Small space below this line */
        }

        .match-card .team-name-display {
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 1.3em; /* Saiz fon lebih besar untuk nama pasukan */
            font-weight: 600;
            color: var(--primary-color);
            text-align: center; /* Memastikan teks di tengah jika ia membungkus */
            flex-shrink: 0; /* Prevent shrinking */
        }

        .match-card .team-name-display img {
            width: 30px; /* Logo sedikit lebih besar */
            height: 30px;
            border-radius: 50%;
            object-fit: cover;
        }

        .match-card .vs {
            margin: 0 10px; /* Ruang di sekeliling 'vs' */
            font-size: 1.1em; /* 'vs' lebih besar */
            font-weight: 700;
            color: #999;
            flex-shrink: 0;
        }

        /* New: Container for scores on one line */
        .match-card .scores-line {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 100%;
            gap: 30px; /* Space between scores */
            margin-bottom: 10px; /* Space below scores line */
        }

        .match-card .score {
            font-size: 1.8em; /* Skor lebih besar */
            font-weight: 700;
            color: var(--header-bg);
            /* Removed margin-top as it's now in scores-line */
        }

        .match-card .winning-score {
            color: var(--success-color); /* Hijau untuk skor kemenangan */
        }

        .match-card .score-penalties {
            font-size: 0.9em;
            color: #666;
            margin-top: -5px; /* Tarik lebih dekat ke skor utama */
            margin-bottom: 10px;
            text-align: center;
            width: 100%; /* Memastikan ia merentasi lebar penuh */
        }

        .match-card.upcoming .teams-line, .match-card.upcoming .scores-line, .match-card.upcoming .score {
            color: var(--upcoming-text);
        }

        /* Kontena untuk butiran perlawanan (gol, kad) */
        .match-card .match-events-container {
            display: flex;
            justify-content: center; /* Mengagihkan ruang untuk dua lajur */
            width: 100%;
            margin-top: 15px; /* Ruang di atas acara */
            gap: 15px; /* Ruang antara lajur acara */
            /* flex-wrap: wrap; Removed for larger screens to keep them side-by-side */
        }

        .match-card .home-events-column {
            text-align: right; /* Jajarkan kandungan ke kanan */
            flex: 0 0 calc(50% - 7.5px); /* Use flex-basis to control width, accounting for gap */
            font-size: 0.8em;
            color: #555;
            padding: 10px;
            border-radius: 8px;
            background-color: #f9f9f9;
            border: 1px solid #eee;
        }

        .match-card .away-events-column {
            flex: 0 0 calc(50% - 7.5px); /* Use flex-basis to control width, accounting for gap */
            text-align: left;
            font-size: 0.8em;
            color: #555;
            padding: 10px;
            border-radius: 8px;
            background-color: #f9f9f9;
            border: 1px solid #eee;
        }

        .match-card .team-event-list div {
            margin-bottom: 2px;
            display: flex;
            align-items: center;
            gap: 5px;
        }
        /* Adjust alignment for home team events when text-align: right */
        .match-card .home-events-column .team-event-list {
            display: flex;
            flex-direction: column;
            align-items: flex-end; /* Align items to the right within the column */
        }


        /* Gaya khusus untuk ikon acara */
        .match-card .team-event-list .goal-icon { color: #28a745; font-size: 1.1em; }
        .match-card .team-event-list .yellow-card-icon { color: #ffc107; font-size: 1.1em; }
        .match-card .team-event-list .red-card-icon { color: #dc3545; font-size: 1.1em; }


        /* Admin Panel - Goal/Card Input Styling */
        .event-input-group {
            display: flex;
            gap: 10px;
            margin-bottom: 10px;
            align-items: center;
            flex-wrap: wrap; /* Allow wrapping on small screens */
        }
        .event-input-group input[type="text"],
        .event-input-group input[type="number"],
        .event-input-group select { /* Added select for player dropdown */
            flex: 1; /* Distribute space */
            min-width: 80px; /* Minimum width for inputs */
            margin-bottom: 0; /* Remove default margin */
            padding: 8px; /* Smaller padding for inline inputs */
            border: 1px solid var(--border-color);
            border-radius: 5px;
            font-size: 0.9em;
        }
        .event-input-group button {
            width: auto;
            padding: 8px 12px;
            font-size: 0.9em;
            margin-top: 0;
            flex-shrink: 0; /* Don't shrink buttons */
        }
        .event-input-group label {
            margin-bottom: 0;
            font-weight: normal;
        }

        .add-event-button {
            background-color: var(--info-color);
            margin-top: 10px;
        }
        .add-event-button:hover {
            background-color: #117a8b;
        }

        /* Highlighted score inputs */
        .score-input-highlight {
            background-color: #e6f7ff; /* Light blue background */
            border: 1px solid #91d5ff; /* Slightly darker border */
        }


        /* Carta Kalah Mati */
        .bracket-container {
            display: flex;
            justify-content: center;
            padding: 20px;
            flex-wrap: wrap;
            position: relative; /* Untuk garisan */
        }

        .bracket-round {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin: 0 40px; /* Ruang lebih antara pusingan */
            min-width: 280px;
            position: relative;
        }

        .bracket-round h3 {
            margin-bottom: 25px;
            color: var(--header-bg);
            font-size: 1.8em;
            font-weight: 700;
        }

        .bracket-match {
            background-color: #fff;
            border: 1px solid var(--border-color);
            border-radius: 10px; /* Sudut bulat */
            margin-bottom: 40px; /* Ruang lebih antara perlawanan dalam pusingan */
            padding: 18px;
            width: 250px;
            box-shadow: 0 4px 10px rgba(0,0,0,0.08);
            text-align: center;
            position: relative;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .bracket-match:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 15px rgba(0,0,0,0.12);
        }

        .bracket-match .team-name {
            font-weight: 600;
            color: var(--primary-color);
            margin-bottom: 5px;
            font-size: 1.1em;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

        .bracket-match .team-name img {
            width: 25px;
            height: 25px;
            border-radius: 50%;
            object-fit: cover;
        }

        .bracket-match .score {
            font-size: 1.4em;
            font-weight: 700;
            color: var(--header-bg);
            margin: 8px 0;
        }

        .bracket-match .date {
            font-size: 0.85em;
            color: #777;
        }

        .bracket-match .placeholder-team {
            color: #999; /* Warna kelabu untuk placeholder */
            font-style: italic;
            font-weight: 400;
        }

        /* Garisan Bracket */
        .bracket-round:first-child .bracket-match:nth-child(odd)::after {
            content: '';
            position: absolute;
            right: -40px; /* Jarak ke pusingan seterusnya */
            top: 50%;
            width: 40px;
            height: 1px;
            background-color: var(--border-color);
            transform: translateY(-50%);
        }

        .bracket-round:first-child .bracket-match:nth-child(odd)::before {
            content: '';
            position: absolute;
            right: -40px;
            top: calc(50% - 20px); /* Sambung ke perlawanan seterusnya */
            width: 1px;
            height: 40px;
            background-color: var(--border-color);
            transform: translateY(-50%);
        }

        .bracket-round:first-child .bracket-match:nth-child(even)::after {
            content: '';
            position: absolute;
            right: -40px;
            top: 50%;
            width: 40px;
            height: 1px;
            background-color: var(--border-color);
            transform: translateY(-50%);
        }

        .bracket-round:first-child .bracket-match:nth-child(even)::before {
            content: '';
            position: absolute;
            right: -40px;
            top: calc(50% + 20px);
            width: 1px;
            height: 40px;
            background-color: var(--border-color);
            transform: translateY(-50%);
        }

        /* Garisan untuk pusingan akhir */
        .bracket-round:nth-child(2) .bracket-match:first-child::before {
            content: '';
            position: absolute;
            left: -40px;
            top: 50%;
            width: 40px;
            height: 1px;
            background-color: var(--border-color);
            transform: translateY(-50%);
        }


        /* Keputusan Akhir */
        .final-result-section {
            text-align: center;
            padding: 50px 20px;
        }

        .final-result-section h2 {
            font-size: 3.5em;
            color: var(--success-color);
            margin-bottom: 40px;
            text-shadow: 1px 1px 3px rgba(0,0,0,0.1);
        }

        .final-placement-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 20px;
            margin-bottom: 40px;
        }

        .final-winner {
            background-color: var(--header-bg);
            color: #fff;
            padding: 30px;
            border-radius: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            box-shadow: 0 10px 25px rgba(0,0,0,0.2);
            position: relative;
            overflow: hidden;
            animation: bounceIn 0.8s ease-out;
            width: 80%; /* Lebar yang lebih responsif */
            max-width: 450px; /* Hadkan lebar */
        }

        .final-winner.runner-up-place {
            background-color: #6c757d; /* Warna kelabu untuk naib juara */
            box-shadow: 0 8px 20px rgba(0,0,0,0.15);
        }

        @keyframes bounceIn {
            0% { transform: scale(0.3); opacity: 0; }
            50% { transform: scale(1.1); opacity: 1; }
            70% { transform: scale(0.9); }
            100% { transform: scale(1); }
        }

        .final-winner h3 {
            font-size: 2.5em; /* Saiz fon lebih kecil untuk muat */
            margin: 0;
            text-transform: uppercase;
            font-weight: 700;
            letter-spacing: 1px;
            color: #fff; /* Pastikan teks putih */
        }

        .placement-label {
            font-size: 1.2em;
            margin-top: 10px;
            font-weight: 400;
            opacity: 0.9;
            color: #fff; /* Pastikan teks putih */
        }

        .third-place-display {
            margin-top: 30px;
            padding: 20px;
            background-color: #f0f8ff; /* Light blue background */
            border-radius: 15px;
            box-shadow: 0 4px 10px rgba(0,0,0,0.05);
            text-align: center;
            width: 80%;
            max-width: 600px;
        }

        .third-place-display h3 {
            color: var(--primary-color);
            margin-bottom: 20px;
        }

        .third-place-cards-wrapper {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 20px;
        }

        .third-place-card { /* New class for individual third place teams */
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
            padding: 15px;
            text-align: center;
            width: 160px; /* Smaller card */
            transition: transform 0.2s ease;
            border: 1px solid var(--border-color);
        }

        .third-place-card:hover {
            transform: translateY(-3px);
        }

        .third-place-card img {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            object-fit: cover;
            border: 2px solid var(--warning-color); /* Gold border */
            margin-bottom: 10px;
        }

        .third-place-card h4 {
            margin: 0;
            font-size: 1.1em;
            color: var(--header-bg);
        }

        /* Removed .placement-label from third-place-card */

        .individual-awards {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 25px;
            margin-top: 40px;
        }

        .award-card {
            background-color: #fff;
            border-radius: 15px;
            box-shadow: 0 6px 15px rgba(0,0,0,0.1);
            padding: 25px;
            text-align: center;
            width: 280px;
            transition: transform 0.2s ease;
        }

        .award-card:hover {
            transform: translateY(-5px);
        }

        .award-card .icon {
            font-size: 3em;
            color: var(--warning-color);
            margin-bottom: 15px;
        }

        .award-card h4 {
            color: var(--primary-color);
            font-size: 1.4em;
            margin-bottom: 10px;
        }

        .award-card p {
            font-size: 1.1em;
            font-weight: 600;
            color: var(--header-bg);
            margin-bottom: 5px;
        }
        .award-card .school-name {
            font-size: 0.9em;
            color: #666;
            font-weight: 400;
            font-style: italic;
        }

        /* Panel Admin & Manager */
        .admin-login, .admin-content, .manager-content {
            padding: 30px;
            max-width: 700px;
            margin: 0 auto;
            background-color: #fff;
            border-radius: 12px; /* Sudut bulat */
            box-shadow: 0 4px 15px rgba(0,0,0,0.08);
        }

        .admin-login h3, .admin-content h3, .admin-content h4, .manager-content h3, .manager-content h4 {
            text-align: center;
            color: var(--header-bg);
            margin-bottom: 25px;
            font-weight: 700;
        }

        .admin-login label, .admin-content label, .manager-content label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: var(--text-color);
        }

        .admin-login input[type="text"],
        .admin-login input[type="password"],
        .admin-content select,
        .admin-content input[type="number"],
        .admin-content input[type="text"],
        .admin-content input[type="date"],
        .admin-content input[type="time"],
        .admin-content input[type="url"],
        .admin-content input[type="file"],
        .manager-content input[type="text"],
        .manager-content input[type="tel"],
        .manager-content input[type="number"],
        .manager-content input[type="file"],
        .manager-content select { /* Tambah input file untuk logo */
            width: calc(100% - 22px); /* Sesuaikan untuk padding dan border */
            padding: 12px;
            margin-bottom: 20px;
            border: 1px solid var(--border-color);
            border-radius: 8px; /* Sudut bulat */
            font-size: 1em;
            box-sizing: border-box; /* Sertakan padding dalam lebar */
        }

        .admin-content .checkbox-container, .manager-content .checkbox-container {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
        }

        .admin-content .checkbox-container input[type="checkbox"], .manager-content .checkbox-container input[type="checkbox"] {
            width: auto;
            margin-right: 10px;
            margin-bottom: 0;
        }
        .admin-content .checkbox-container label, .manager-content .checkbox-container label {
            margin-bottom: 0;
        }


        .admin-login button,
        .admin-content button,
        .manager-content button {
            background-color: var(--primary-color);
            color: #fff;
            border: none;
            padding: 12px 20px;
            border-radius: 8px; /* Sudut bulat */
            cursor: pointer;
            font-size: 1.1em;
            width: 100%;
            transition: background-color 0.3s ease, transform 0.2s ease;
            font-weight: 600;
            margin-top: 10px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        .admin-login button:hover,
        .admin-content button:hover,
        .manager-content button:hover {
            background-color: #004085;
            transform: translateY(-2px);
        }

        .admin-login #login-error {
            color: var(--danger-color);
            text-align: center;
            margin-top: 15px;
            font-weight: 600;
        }

        .admin-content .admin-section-card, .manager-content .manager-section-card {
            margin-bottom: 30px;
            border: 1px solid var(--border-color);
            padding: 25px;
            border-radius: 12px; /* Sudut bulat */
            background-color: var(--secondary-color);
            box-shadow: inset 0 1px 3px rgba(0,0,0,0.05);
        }

        .admin-content .match-preview {
            background-color: #eaf3fe;
            border: 1px solid #a7d3ff;
            padding: 15px;
            margin-bottom: 20px;
            border-radius: 8px; /* Sudut bulat */
            font-size: 1em;
            color: var(--primary-color);
            font-weight: 500;
        }

        .admin-content .match-preview strong {
            color: var(--header-bg);
            font-weight: 700;
        }

        .admin-content .button-group, .manager-content .button-group {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }

        .admin-content .button-group button, .manager-content .button-group button {
            width: auto;
            flex-grow: 1;
        }

        /* Player List Table */
        .player-list-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            margin-bottom: 20px;
        }
        .player-list-table th, .player-list-table td {
            border: 1px solid var(--border-color);
            padding: 10px;
            text-align: left;
        }
        .player-list-table th {
            background-color: var(--primary-color);
            color: #fff;
            font-weight: 600;
            font-size: 0.9em;
        }
        .player-list-table td {
            background-color: #f6f9fc;
        }
        .player-list-table td button {
            width: auto;
            padding: 5px 10px;
            font-size: 0.85em;
            margin-top: 0;
        }
        .player-list-table input[type="text"],
        .player-list-table input[type="number"] {
            width: calc(100% - 10px); /* Adjust for padding */
            padding: 5px;
            margin-bottom: 0;
            border-radius: 5px;
        }
        .player-list-table input[type="number"] {
            -moz-appearance: textfield; /* Firefox */
        }
        .player-list-table input[type="number"]::-webkit-outer-spin-button,
        .player-list-table input[type="number"]::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }


        /* Notifikasi Toast */
        .toast-container {
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 2000;
        }

        .toast {
            background-color: #333;
            color: white;
            padding: 12px 20px;
            border-radius: 8px; /* Sudut bulat */
            margin-bottom: 10px;
            opacity: 0;
            transform: translateX(100%);
            transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            min-width: 250px;
            font-size: 0.95em;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .toast.show {
            opacity: 1;
            transform: translateX(0);
        }

        .toast.success { background-color: var(--success-color); }
        .toast.error { background-color: var(--danger-color); }
        .toast.info { background-color: var(--info-color); }
        .toast.warning { background-color: var(--warning-color); }

        .toast .icon {
            font-size: 1.2em;
        }

        /* Modal Pengesahan Tersuai */
        .custom-modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.6);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 3000;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s ease, visibility 0.3s ease;
        }

        .custom-modal-overlay.show {
            opacity: 1;
            visibility: visible;
        }

        .custom-modal-content {
            background-color: #fff;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
            text-align: center;
            max-width: 400px;
            width: 90%;
            transform: translateY(-20px);
            transition: transform 0.3s ease;
        }

        .custom-modal-overlay.show .custom-modal-content {
            transform: translateY(0);
        }

        .custom-modal-content h4 {
            color: var(--header-bg);
            margin-bottom: 20px;
            font-size: 1.5em;
        }

        .custom-modal-content p {
            margin-bottom: 25px;
            font-size: 1.1em;
            color: var(--text-color);
        }

        .custom-modal-buttons {
            display: flex;
            justify-content: center;
            gap: 15px;
        }

        .custom-modal-buttons button {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1em;
            font-weight: 600;
            transition: background-color 0.3s ease, transform 0.2s ease;
            width: 120px;
        }

        .custom-modal-buttons .confirm-btn {
            background-color: var(--danger-color);
            color: #fff;
        }

        .custom-modal-buttons .confirm-btn:hover {
            background-color: #c82333;
            transform: translateY(-2px);
        }

        .custom-modal-buttons .cancel-btn {
            background-color: var(--secondary-color);
            color: var(--text-color);
            border: 1px solid var(--border-color);
        }

        .custom-modal-buttons .cancel-btn:hover {
            background-color: #e2e6ea;
            transform: translateY(-2px);
        }

        /* Modal untuk Paparan Info Pasukan */
        .team-info-modal-content {
            background-color: #fff;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
            text-align: left; /* Ubah ke kiri untuk teks */
            max-width: 600px; /* Lebarkan sedikit */
            width: 90%;
            transform: translateY(-20px);
            transition: transform 0.3s ease;
            max-height: 80vh; /* Set max height for scrollability */
            overflow-y: auto; /* Enable vertical scrolling */
        }
        .team-info-modal-content .modal-header-logo {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            object-fit: cover;
            margin-bottom: 10px;
            border: 3px solid var(--primary-color);
        }
        .team-info-modal-content .modal-header-title {
            text-align: center;
            margin-bottom: 20px;
        }
        .team-info-modal-content .modal-header-title h4 {
            color: var(--header-bg);
            margin: 0;
            font-size: 1.8em;
        }
        .team-info-modal-content p {
            margin-bottom: 10px;
            font-size: 1.0em;
            color: var(--text-color);
            text-align: left;
        }
        .team-info-modal-content p strong {
            color: var(--primary-color);
        }
        .team-info-modal-content .player-list-table {
            margin-top: 20px;
        }
        /* Align table headers and specific columns to center */
        .team-info-modal-content .player-list-table th,
        .team-info-modal-content .player-list-table td:nth-child(1), /* Bil. */
        .team-info-modal-content .player-list-table td:nth-child(3) { /* No. Jersi */
            text-align: center;
        }


        /* Footer */
        footer {
            background-color: var(--header-bg);
            color: #fff;
            text-align: center;
            padding: 20px;
            margin-top: 40px;
            border-top-left-radius: 15px;
            border-top-right-radius: 15px;
            box-shadow: 0 -4px 8px rgba(0,0,0,0.1);
        }
        footer p {
            margin: 0;
            font-size: 0.9em;
            opacity: 0.8;
        }

        /* Print Specific Styles */
        @media print {
            body > *:not(.container) {
                display: none !important;
            }
            .container {
                margin: 0 !important; /* Ensure no top margin for printing */
                padding: 0;
                box-shadow: none;
            }
            .tab-content {
                display: block !important;
                padding: 0;
                box-shadow: none;
                animation: none;
                margin-top: 0 !important; /* Ensure no top margin for printing */
            }
            .tab-content h2, .tab-content h3 {
                color: #000 !important; /* Black text for print */
            }
            .standings-table, .match-fixtures, .bracket-container, .final-result-section {
                break-inside: avoid;
            }
            .standings-table th, .standings-table td {
                border: 1px solid #ccc;
            }
            .match-card, .bracket-match, .final-winner, .award-card {
                border: 1px solid #ccc;
                box-shadow: none;
            }
            .print-button {
                display: none !important;
            }
            /* Explicitly show match fixtures for print */
            .match-fixtures {
                display: flex !important; /* ensure flex for print */
            }
        }


        /* Reka Bentuk Responsif */
        @media (max-width: 992px) {
            header {
                flex-direction: column; /* Susun item secara menegak pada skrin kecil */
                padding: 20px 0; /* Kurangkan padding */
            }
            header h1 {
                font-size: 2.2em;
            }
            header p {
                font-size: 1em;
            }
            .header-logo {
                position: static; /* Kembali ke aliran normal */
                transform: none; /* Buang transformasi */
                margin-bottom: 10px; /* Tambah ruang di bawah logo */
                height: 60px;
                left: auto; /* Buang kedudukan kiri */
            }
            .header-user-info {
                top: 15px;
                right: 10px;
            }
            /* Hide desktop nav links */
            nav ul {
                display: none;
            }
            /* Show hamburger menu */
            .hamburger-menu {
                display: flex; /* Memastikan ikon hamburger kelihatan sebagai flex container */
            }
            /* When nav is fixed (mobile menu open), hide the header logo */
            nav.nav-fixed-on-mobile + .container + header .header-logo {
                display: none;
            }
            /* Show mobile nav logo when nav is fixed */
            nav.nav-fixed-on-mobile .nav-mobile-logo-display {
                display: block;
            }

            .container {
                margin: 10px auto;
                padding: 0 10px;
            }
            h2 {
                font-size: 2em;
            }
            h3 {
                font-size: 1.5em;
            }
            .standings-table th, .standings-table td {
                padding: 10px 8px;
                font-size: 0.85em;
            }
            /* match-fixtures is already flex-direction column, so no change needed here */
            .bracket-container {
                flex-direction: column;
                align-items: center;
            }
            .bracket-round {
                margin: 20px 0;
                width: 100%;
                min-width: unset;
            }
            .bracket-match {
                width: 90%;
            }
            .admin-login, .admin-content, .manager-content {
                padding: 20px;
            }
            .admin-content button, .manager-content button {
                font-size: 1em;
            }
            .admin-content .button-group, .manager-content .button-group {
                flex-direction: column;
            }
            .final-winner h3 {
                font-size: 2.5em;
            }
            .final-winner p {
                font-size: 1.2em;
            }
            .third-place-display {
                width: 90%;
                max-width: 450px;
            }
            .third-place-card {
                width: 100%;
            }
            /* Make off-canvas menu full screen on smaller devices */
            .nav-overlay ul {
                width: 100%; /* Full width */
                max-width: none; /* Remove max-width constraint */
                height: 100vh; /* Full viewport height */
                padding-top: 80px; /* Adjust padding to clear fixed nav bar (approx. height of nav) */
            }
            /* No need for teams-and-score-line to stack here, as teams-line and scores-line are separate */
            .match-card .teams-line {
                flex-direction: column; /* Stack team blocks vertically on very small screens */
                gap: 10px;
            }
            .match-card .scores-line {
                flex-direction: column; /* Stack scores vertically on very small screens */
                gap: 5px;
            }
            .match-card .vs {
                margin: 5px 0; /* Adjust margin for vertical stacking */
            }
            /* Re-enable wrapping and stacking for event columns on smaller screens */
            .match-card .match-events-container {
                flex-wrap: wrap;
                justify-content: center;
            }
            .match-card .home-events-column,
            .match-card .away-events-column {
                flex: 0 0 100%; /* Take full width when wrapped */
                min-width: unset; /* Remove min-width constraint */
                margin-bottom: 10px; /* Add space between stacked columns */
            }
            .match-card .home-events-column {
                text-align: left; /* Revert to left for stacking on mobile for consistency */
            }
            .match-card .home-events-column .team-event-list {
                align-items: flex-start; /* Align items to left when stacked */
            }
        }

        @media (max-width: 576px) {
            body {
                font-size: 14px; /* Ensure a minimum base font size for overall readability */
            }
            header h1 {
                font-size: 1.8em;
            }
            header p {
                font-size: 0.9em;
            }
            .header-logo {
                display: none; /* Sembunyikan logo pada skrin yang sangat kecil */
            }
            /* Hamburger menu will be visible */
            .hamburger-menu {
                display: flex;
            }
            .standings-table th, .standings-table td {
                padding: 8px 5px;
                font-size: 0.75em;
            }
            /* Sembunyikan beberapa kolum pada skrin kecil */
            .standings-table th:nth-child(7), .standings-table td:nth-child(7) { display: none; } /* J */
            .standings-table th:nth-child(8), .standings-table td:nth-child(8) { display: none; } /* B */
            .standings-table th:nth-child(9), .standings-table td:nth-child(9) { display: none; } /* +/- */
            .final-winner h3 {
                font-size: 2em;
            }
            .final-winner p {
                font-size: 1em;
            }
        }
    </style>
</head>
<body>
    <header>
        <!-- PENTING: Logo kini berada di dalam header flexbox, tetapi masih absolute untuk desktop -->
        <img id="header-logo-img" class="header-logo" src="https://placehold.co/80x80/007bff/ffffff?text=LOGO" alt="Logo Bola Sepak"/>
        <!-- Kontena untuk tajuk dan sub-tajuk agar boleh di tengah oleh flexbox -->
        <div style="text-align: center;">
            <h1>Kejohanan Bola Sepak Premier</h1>
            <p>Maklumat Penuh &amp; Kemas Kini Langsung</p>
        </div>
        <div class="header-user-info" id="header-user-info">
            Selamat Datang, <span id="loggedInUsername"></span>!
            <button onclick="logout()">Log Keluar</button>
        </div>
    </header>

    <nav>
        <!-- New: Mobile nav logo display -->
        <img id="nav-mobile-logo-display" class="nav-mobile-logo-display" src="" alt="Mobile Nav Logo"/>
        <ul id="main-nav-links">
            <li><a href="#home" class="tab-link active" data-tab="home">Laman Utama</a></li>
            <li><a href="#about" class="tab-link" data-tab="about">Pengenalan</a></li>
            <li><a href="#groupA" class="tab-link" data-tab="groupA">Kumpulan A</a></li>
            <li><a href="#groupB" class="tab-link" data-tab="groupB">Kumpulan B</a></li>
            <li><a href="#knockout" class="tab-link" data-tab="knockout">Carta Kalah Mati</a></li>
            <li><a href="#finalResult" class="tab-link" data-tab="finalResult">Keputusan Akhir</a></li>
            <li><a href="#admin" class="tab-link" data-tab="admin">Panel Admin</a></li>
            <li id="manager-tab-link" style="display: none;"><a href="#manager" class="tab-link" data-tab="manager">Urus Pasukan</a></li>
        </ul>
        <div class="hamburger-menu" id="hamburger-menu">
            <span></span>
            <span></span>
            <span></span>
        </div>
    </nav>

    <div class="nav-overlay" id="mobile-nav-overlay">
        <ul class="mobile-nav-links">
            <li><a href="#home" class="tab-link" data-tab="home">Laman Utama</a></li>
            <li><a href="#about" class="tab-link" data-tab="about">Pengenalan</a></li>
            <li><a href="#groupA" class="tab-link" data-tab="groupA">Kumpulan A</a></li>
            <li><a href="#groupB" class="tab-link" data-tab="groupB">Kumpulan B</a></li>
            <li><a href="#knockout" class="tab-link" data-tab="knockout">Carta Kalah Mati</a></li>
            <li><a href="#finalResult" class="tab-link" data-tab="finalResult">Keputusan Akhir</a></li>
            <li><a href="#admin" class="tab-link" data-tab="admin">Panel Admin</a></li>
            <li id="mobile-manager-tab-link" style="display: none;"><a href="#manager" class="tab-link" data-tab="manager">Urus Pasukan</a></li>
        </ul>
    </div>

    <div class="container">
        <div id="home" class="tab-content active">
            <section class="home-section">
                <h2>Selamat Datang ke Laman Rasmi Kejohanan Bola Sepak!</h2>
                <img src="https://placehold.co/1000x450/007bff/ffffff?text=Stadium+Penuh+Peminat" alt="Stadium Bola Sepak"/>
                <p>Ikuti perkembangan terkini kejohanan bola sepak paling dinanti-nantikan ini! Dapatkan maklumat lengkap tentang carta kedudukan kumpulan, jadual perlawanan, keputusan, dan carta kalah mati yang dikemas kini secara langsung.</p>
                <div class="cta-buttons">
                    <button onclick="document.querySelector('[data-tab=groupA]').click()">Lihat Kumpulan A</button>
                    <button onclick="document.querySelector('[data-tab=knockout]').click()">Lihat Carta Kalah Mati</button>
                </div>
                <div class="latest-updates" style="margin-top: 30px; padding: 20px; background-color: #eaf3fe; border-radius: 8px; border: 1px solid #a7d3ff; text-align: center;">
                    <h3>Kemas Kini Perlawanan Terkini:</h3>
                    <p id="latest-match-update-text">Tiada kemas kini perlawanan terkini.</p>
                </div>
            </section>
        </div>

        <div id="about" class="tab-content">
            <section class="home-section">
                <h2>Pengenalan Kejohanan</h2>
                <p>Kejohanan Bola Sepak Premier merupakan acara tahunan yang menghimpunkan bakat-bakat terbaik dari seluruh negara. Matlamat utama kami adalah untuk mempromosikan semangat kesukanan, persaingan sihat, dan kecemerlangan dalam sukan bola sepak.</p>
                <p>Pada edisi kali ini, sebanyak <strong><span id="total-teams-count">0</span> pasukan</strong> akan bersaing dalam dua kumpulan (Kumpulan A dan Kumpulan B). Dua pasukan teratas dari setiap kumpulan akan mara ke pusingan kalah mati, yang terdiri daripada Separuh Akhir dan Akhir.</p>
                <p>Kami menjemput semua peminat bola sepak untuk mengikuti setiap perlawanan, menyokong pasukan kegemaran anda, dan menjadi sebahagian daripada kemeriahan ini. Selamat menyaksikan!</p>

                <div class="countdown-section">
                    <h3>Pembahagian Kumpulan Automatik</h3>
                    <div class="countdown-timer" id="group-division-countdown">00:00</div>
                    <p class="countdown-message" id="group-division-message">Kira detik akan bermula dari Panel Admin.</p>
                </div>

                <h3>Pasukan Bertanding</h3>
                <div class="team-list" id="participating-teams-list">
                    </div>
            </section>
        </div>

        <div id="groupA" class="tab-content">
            <div style="text-align: right; margin-bottom: 20px;">
                <button onclick="printTab('groupA')" class="print-button" style="background-color: var(--primary-color); color: white; padding: 10px 20px; border: none; border-radius: 8px; cursor: pointer;">Cetak Kumpulan A</button>
            </div>
            <h2>Kumpulan A</h2>
            <h3>Carta Kedudukan</h3>
            <table class="standings-table">
                <thead>
                    <tr>
                        <th>Ked.</th>
                        <th style="width: 25%;">Pasukan</th>
                        <th>P</th>
                        <th>M</th>
                        <th>S</th>
                        <th>K</th>
                        <th>J</th>
                        <th>B</th>
                        <th>&plusmn;</th>
                        <th>Mata</th>
                    </tr>
                </thead>
                <tbody id="groupA-standings-body">
                    </tbody>
            </table>
            <h3>Jadual Perlawanan</h3>
            <div class="match-fixtures" id="groupA-fixtures">
                </div>
        </div>

        <div id="groupB" class="tab-content">
            <div style="text-align: right; margin-bottom: 20px;">
                <button onclick="printTab('groupB')" class="print-button" style="background-color: var(--primary-color); color: white; padding: 10px 20px; border: none; border-radius: 8px; cursor: pointer;">Cetak Kumpulan B</button>
            </div>
            <h2>Kumpulan B</h2>
            <h3>Carta Kedudukan</h3>
            <table class="standings-table">
                <thead>
                    <tr>
                        <th>Ked.</th>
                        <th style="width: 25%;">Pasukan</th>
                        <th>P</th>
                        <th>M</th>
                        <th>S</th>
                        <th>K</th>
                        <th>J</th>
                        <th>B</th>
                        <th>&plusmn;</th>
                        <th>Mata</th>
                    </tr>
                </thead>
                <tbody id="groupB-standings-body">
                    </tbody>
            </table>
            <h3>Jadual Perlawanan</h3>
            <div class="match-fixtures" id="groupB-fixtures">
                </div>
        </div>

        <div id="knockout" class="tab-content">
            <div style="text-align: right; margin-bottom: 20px;">
                <button onclick="printTab('knockout')" class="print-button" style="background-color: var(--primary-color); color: white; padding: 10px 20px; border: none; border-radius: 8px; cursor: pointer;">Cetak Carta Kalah Mati</button>
            </div>
            <h2>Carta Kalah Mati</h2>
            <div class="bracket-container" id="knockout-bracket">
                </div>
        </div>

        <div id="finalResult" class="tab-content">
            <div style="text-align: right; margin-bottom: 20px;">
                <button onclick="printTab('finalResult')" class="print-button" style="background-color: var(--primary-color); color: white; padding: 10px 20px; border: none; border-radius: 8px; cursor: pointer;">Cetak Keputusan Akhir</button>
            </div>
            <section class="final-result-section">
                <h2>Keputusan Akhir Kejohanan</h2>

                <div class="final-placement-container">
                    <div class="final-winner champion-place">
                        <img id="final-winner-logo" src="https://placehold.co/100x100/cccccc/000000?text=LOGO" alt="Juara Logo"/>
                        <h3 id="final-winner-team">Belum Ditentukan</h3>
                        <p class="placement-label">Juara</p>
                    </div>
                    <div class="final-winner runner-up-place">
                        <img id="final-runner-up-logo" src="https://placehold.co/100x100/cccccc/000000?text=LOGO" alt="Naib Juara Logo"/>
                        <h3 id="final-runner-up-team">Belum Ditentukan</h3>
                        <p class="placement-label">Naib Juara</p>
                    </div>

                    <div class="third-place-display">
                        <h3>Tempat Ketiga Bersama</h3>
                        <div id="third-place-teams-container" class="third-place-cards-wrapper">
                            </div>
                    </div>
                </div>

                <h3>Anugerah Individu</h3>
                <div class="individual-awards">
                    <div class="award-card">
                        <span class="icon">🌟</span>
                        <h4>Pemain Terbaik</h4>
                        <p id="best-player-name">Belum Ditentukan</p>
                        <p class="school-name" id="best-player-school">Belum Ditentukan</p>
                    </div>
                    <div class="award-card">
                        <span class="icon">🧤</span>
                        <h4>Penjaga Gol Terbaik</h4>
                        <p id="best-goalkeeper-name">Belum Ditentukan</p>
                        <p class="school-name" id="best-goalkeeper-school">Belum Ditentukan</p>
                    </div>
                    <div class="award-card">
                        <span class="icon">⚽</span>
                        <h4>Penjaring Terbanyak</h4>
                        <p id="top-scorer-name">Belum Ditentukan</p>
                        <p class="school-name" id="top-scorer-school">Belum Ditentukan</p>
                    </div>
                </div>
            </section>
        </div>

        <div id="admin" class="tab-content">
            <div class="admin-login" id="login-section">
                <h3>Log Masuk</h3>
                <label for="user-role">Log Masuk Sebagai:</label>
                <select id="user-role" style="width: calc(100% - 22px); padding: 12px; margin-bottom: 20px; border: 1px solid var(--border-color); border-radius: 8px; font-size: 1em; box-sizing: border-box;">
                    <option value="admin">Admin</option>
                    <option value="manager">Pengurus Pasukan</option>
                </select>

                <div id="admin-login-fields">
                    <label for="admin-username">Nama Pengguna Admin:</label>
                    <input type="text" id="admin-username" name="admin-username" value="admin"/>
                    <label for="admin-password">Kata Laluan Admin:</label>
                    <input type="password" id="admin-password" name="admin-password" value="1234"/>
                </div>

                <div id="manager-login-fields" style="display: none;">
                    <label for="manager-team-select">Pilih Pasukan Anda:</label>
                    <select id="manager-team-select" style="width: calc(100% - 22px); padding: 12px; margin-bottom: 20px; border: 1px solid var(--border-color); border-radius: 8px; font-size: 1em; box-sizing: border-box;">
                        <option value="">-- Pilih Pasukan --</option>
                    </select>
                    <label for="manager-username">Nama Pengguna Pengurus:</label>
                    <input type="text" id="manager-username" name="manager-username" placeholder="Nama Pengguna Pengurus"/>
                    <label for="manager-password">Kata Laluan Pengurus:</label>
                    <input type="password" id="manager-password" name="manager-password" placeholder="Kata Laluan Pengurus"/>
                </div>

                <button id="loginBtn">Log Masuk</button>
                <p id="login-error" style="display: none;">Nama pengguna atau kata laluan salah.</p>
            </div>

            <div class="admin-content" id="admin-content" style="display: none;">
                <h3>Panel Kawalan Admin</h3>

                <div class="admin-section-card">
                    <h4>Kemas Kini Keputusan Perlawanan</h4>
                    <label for="match-select">Pilih Perlawanan:</label>
                    <select id="match-select" onchange="displayMatchPreview()">
                        <option value="">-- Pilih Perlawanan --</option>
                    </select>
                    <div class="match-preview" id="match-preview" style="display: none;"></div>

                    <!-- Home Team Inputs -->
                    <h5 style="margin-top: 20px; color: var(--primary-color);">Jaringan Pasukan Rumah:</h5>
                    <input type="number" id="score-home" min="0" value="0" oninput="autoGenerateEventInputs('home', 'goal')" class="score-input-highlight"/>
                    <div id="home-goals-input-container">
                        </div>

                    <h5 style="margin-top: 20px; color: var(--primary-color);">Kad Kuning Pasukan Rumah:</h5>
                    <input type="number" id="home-yellow-cards-count" min="0" value="0" oninput="autoGenerateEventInputs('home', 'yellow')"/>
                    <div id="home-yellow-cards-input-container">
                        </div>

                    <h5 style="margin-top: 20px; color: var(--primary-color);">Kad Merah Pasukan Rumah:</h5>
                    <input type="number" id="home-red-cards-count" min="0" value="0" oninput="autoGenerateEventInputs('home', 'red')"/>
                    <div id="home-red-cards-input-container">
                        </div>

                    <!-- Away Team Inputs -->
                    <h5 style="margin-top: 20px; color: var(--primary-color);">Jaringan Pasukan Pelawat:</h5>
                    <input type="number" id="score-away" min="0" value="0" oninput="autoGenerateEventInputs('away', 'goal')" class="score-input-highlight"/>
                    <div id="away-goals-input-container">
                        </div>

                    <h5 style="margin-top: 20px; color: var(--primary-color);">Kad Kuning Pasukan Pelawat:</h5>
                    <input type="number" id="away-yellow-cards-count" min="0" value="0" oninput="autoGenerateEventInputs('away', 'yellow')"/>
                    <div id="away-yellow-cards-input-container">
                        </div>

                    <h5 style="margin-top: 20px; color: var(--primary-color);">Kad Merah Pasukan Pelawat:</h5>
                    <input type="number" id="away-red-cards-count" min="0" value="0" oninput="autoGenerateEventInputs('away', 'red')"/>
                    <div id="away-red-cards-input-container">
                        </div>

                    <div id="penalty-inputs" style="display: none;">
                        <label for="penalty-home">Jaringan Penalti Pasukan Rumah:</label>
                        <input type="number" id="penalty-home" min="0" value="0"/>
                        <label for="penalty-away">Jaringan Penalti Pasukan Pelawat:</label>
                        <input type="number" id="penalty-away" min="0" value="0"/>
                    </div>

                    <button id="updateMatchResultBtn">Kemaskini Keputusan</button>
                </div>

                <div class="admin-section-card">
                    <h4>Jana Jadual Perlawanan Kumpulan &amp; Pembahagian Automatik</h4>
                    <label for="group-match-date">Tarikh Hari Pertama Kejohanan:</label>
                    <input type="date" id="group-match-date"/>
                    <label for="group-match-time">Masa Perlawanan Pertama Bermula:</label>
                    <input type="time" id="group-match-time"/>
                    <label for="countdown-start-date">Tarikh Kira Detik Bermula:</label>
                    <input type="date" id="countdown-start-date"/>
                    <label for="countdown-start-time">Masa Kira Detik Bermula:</label>
                    <input type="time" id="countdown-start-time"/>
                    <label for="countdown-duration-input">Tempoh Kira Detik Pembahagian (saat):</label>
                    <input type="number" id="countdown-duration-input" min="5" value="10"/>
                    <button id="startGroupDivisionAndGenerateFixturesBtn">Mula Kira Detik &amp; Jana Jadual Kumpulan</button>
                    <p style="font-size: 0.9em; color: #666; margin-top: 10px;">*Ini akan memulakan kira detik. Setelah selesai, pasukan akan dibahagikan secara rawak dan jadual perlawanan kumpulan akan dijana secara automatik.</p>
                </div>

                <div class="admin-section-card">
                    <h4>Jana/Urus Jadual Perlawanan Kalah Mati</h4>
                    <div class="checkbox-container">
                        <input type="checkbox" id="enable-extra-time"/>
                        <label for="enable-extra-time">Benarkan Masa Tambahan (Nota: Admin perlu mengemas kini skor penalti secara manual jika seri selepas masa tambahan)</label>
                    </div>
                    <label for="knockout-start-date">Tarikh Mula Perlawanan Kalah Mati:</label>
                    <input type="date" id="knockout-start-date"/>
                    <label for="knockout-start-time">Masa Mula Perlawanan Kalah Mati:</label>
                    <input type="time" id="knockout-start-time"/>
                    <button id="updateKnockoutFixtureDatesBtn">Kemaskini Tarikh/Masa Kalah Mati</button>
                    <p style="font-size: 0.9em; color: #666; margin-top: 10px;">*Ini akan mengemas kini tarikh dan masa untuk semua perlawanan kalah mati.</p>

                    <label for="edit-knockout-match-select">Pilih Perlawanan Kalah Mati (untuk edit individu):</label>
                    <select id="edit-knockout-match-select" onchange="loadKnockoutMatchDetailsForEdit()">
                        <option value="">-- Pilih Perlawanan --</option>
                    </select>

                    <div id="edit-knockout-match-details" style="display: none; margin-top: 15px; padding: 15px; background-color: #eaf3fe; border-radius: 8px;">
                        <label for="edit-knockout-date">Tarikh:</label>
                        <input type="date" id="edit-knockout-date"/>

                        <label for="edit-knockout-time">Masa:</label>
                        <input type="time" id="edit-knockout-time"/>

                        <button id="saveKnockoutMatchDetailsBtn" style="margin-top: 15px;">Simpan Perubahan Kalah Mati</button>
                    </div>
                    <button id="resetKnockoutBracketBtn" style="background-color: var(--warning-color);">Set Semula Carta Kalah Mati</button>
                    <p style="font-size: 0.9em; color: #666; margin-top: 10px;">*Ini akan menetapkan semula pasukan dalam carta kalah mati kepada placeholder.</p>
                </div>

                <div class="admin-section-card">
                    <h4>Ubah Nama Pasukan &amp; Logo</h4>
                    <label for="rename-team-select">Pilih Pasukan:</label>
                    <select id="rename-team-select">
                        <option value="">-- Pilih Pasukan --</option>
                    </select>
                    <label for="new-team-name">Nama Pasukan Baharu:</label>
                    <input type="text" id="new-team-name" placeholder="Masukkan nama baharu pasukan"/>
                    <label for="new-team-logo-file">Muat Naik Logo Baharu:</label>
                    <input type="file" id="new-team-logo-file" accept="image/*"/>
                    <p style="font-size: 0.8em; color: #666; margin-top: -15px; margin-bottom: 20px;">*Sila ambil perhatian: Logo akan disimpan sebagai data dalam pelayar anda dan mungkin terhad saiznya.</p>
                    <button id="renameTeamBtn">Ubah Nama Pasukan &amp; Logo</button>
                </div>

                <div class="admin-section-card">
                    <h4>Tambah / Buang Pasukan</h4>
                    <label for="add-team-name">Nama Pasukan Baharu:</label>
                    <input type="text" id="add-team-name" placeholder="Cth: Harimau Selatan"/>
                    <label for="add-team-logo-file">Muat Naik Logo Pasukan:</label>
                    <input type="file" id="add-team-logo-file" accept="image/*"/>
                    <p style="font-size: 0.8em; color: #666; margin-top: -15px; margin-bottom: 20px;">*Sila ambil perhatian: Logo akan disimpan sebagai data dalam pelayar anda dan mungkin terhad saiznya.</p>
                    <div class="button-group">
                        <button id="addTeamBtn">Tambah Pasukan</button>
                        <button id="removeTeamBtn" style="background-color: var(--danger-color);">Buang Pasukan</button>
                    </div>
                     <label for="new-team-manager-username">Nama Pengguna Pengurus (untuk pasukan baru):</label>
                    <input type="text" id="new-team-manager-username" placeholder="cth: pengurus_harimau"/>
                    <label for="new-team-manager-password">Kata Laluan Pengurus (untuk pasukan baru):</label>
                    <input type="password" id="new-team-manager-password" placeholder="cth: pass123"/>
                </div>

                <div class="admin-section-card">
                    <h4>Urus Logo Header</h4>
                    <label for="header-logo-file">Muat Naik Logo Header Baharu:</label>
                    <input type="file" id="header-logo-file" accept="image/*"/>
                    <p style="font-size: 0.8em; color: #666; margin-top: -15px; margin-bottom: 20px;">*Sila ambil perhatian: Logo akan disimpan sebagai data dalam pelayar anda dan mungkin terhad saiznya.</p>
                    <button id="updateHeaderLogoBtn">Kemaskini Logo Header</button>
                </div>

                <div class="admin-section-card">
                    <h4>Tetapkan Anugerah Individu</h4>
                    <label for="best-player-input">Pemain Terbaik:</label>
                    <input type="text" id="best-player-input" placeholder="Nama Pemain Terbaik"/>
                    <label for="best-player-school-input">Sekolah Pemain Terbaik:</label>
                    <input type="text" id="best-player-school-input" placeholder="Nama Sekolah"/>

                    <label for="best-goalkeeper-input">Penjaga Gol Terbaik:</label>
                    <input type="text" id="best-goalkeeper-input" placeholder="Nama Penjaga Gol Terbaik"/>
                    <label for="best-goalkeeper-school-input">Sekolah Penjaga Gol Terbaik:</label>
                    <input type="text" id="best-goalkeeper-school-input" placeholder="Nama Sekolah"/>

                    <label for="top-scorer-input">Penjaring Terbanyak:</label>
                    <input type="text" id="top-scorer-input" placeholder="Nama Penjaring Terbanyak"/>
                    <label for="top-scorer-school-input">Sekolah Penjaring Terbanyak:</label>
                    <input type="text" id="top-scorer-school-input" placeholder="Nama Sekolah"/>
                    <button id="updateIndividualAwardsBtn">Kemaskini Anugerah Individu</button>
                </div>

                <button id="logoutAdminBtn" style="margin-top: 20px; background-color: #dc3545;">Log Keluar</button>
                <button id="resetDataBtn" style="margin-top: 10px; background-color: #6c757d;">Set Semula Semua Data</button>
            </div>
        </div>

        <div id="manager" class="tab-content">
            <div class="manager-content" id="manager-content" style="display: none;">
                <h3>Panel Pengurus Pasukan: <span id="manager-team-display-name"></span></h3>
                <div class="manager-section-card">
                    <h4>Maklumat Pasukan</h4>
                    <label for="manager-edit-team-name">Nama Pasukan:</label>
                    <input type="text" id="manager-edit-team-name"/>
                    <label for="manager-edit-team-logo-file">Muat Naik Logo Baharu:</label>
                    <input type="file" id="manager-edit-team-logo-file" accept="image/*"/>
                    <p style="font-size: 0.8em; color: #666; margin-top: -15px; margin-bottom: 20px;">*Sila ambil perhatian: Logo akan disimpan sebagai data dalam pelayar anda dan mungkin terhad saiznya.</p>
                    <label for="manager-edit-manager-name">Nama Pengurus:</label>
                    <input type="text" id="manager-edit-manager-name"/>
                    <label for="manager-edit-manager-phone">No. Telefon Pengurus:</label>
                    <input type="tel" id="manager-edit-manager-phone"/>
                    <button id="saveTeamInfoBtn">Simpan Maklumat Pasukan</button>
                    <p id="manager-edit-locked-message" style="color: var(--danger-color); text-align: center; margin-top: 15px; font-weight: 600; display: none;">*Maklumat pasukan tidak boleh diubah setelah jadual perlawanan dijana.</p>
                </div>

                <div class="manager-section-card">
                    <h4>Senarai Pemain (<span id="player-count">0</span>/15)</h4>
                    <table class="player-list-table">
                        <thead>
                            <tr>
                                <th>Bil.</th>
                                <th>Nama Pemain</th>
                                <th>No. Jersi</th>
                                <th id="player-actions-header">Tindakan</th>
                            </tr>
                        </thead>
                        <tbody id="player-list-body">
                            </tbody>
                    </table>
                    <div class="button-group">
                        <button id="addPlayerBtn">Tambah Pemain</button>
                        <button id="savePlayersBtn">Simpan Senarai Pemain</button>
                    </div>
                </div>
                <button onclick="logout()" style="margin-top: 20px; background-color: var(--danger-color);">Log Keluar</button>
                <p style="font-size: 0.9em; color: #666; margin-top: 10px; text-align: center;">
                    *Sila pastikan semua maklumat pasukan dan pemain adalah betul dan sahih sebelum jadual perlawanan dijana. Maklumat tidak dapat diubah setelah itu.
                </p>
            </div>
        </div>
    </div>

    <div class="toast-container" id="toast-container"></div>

    <div class="custom-modal-overlay" id="confirmation-modal-overlay">
        <div class="custom-modal-content">
            <h4 id="modal-title">Pengesahan</h4>
            <p id="modal-message">Adakah anda pasti?</p>
            <div class="custom-modal-buttons">
                <button class="confirm-btn" id="modal-confirm-btn">Ya</button>
                <button class="cancel-btn" id="modal-cancel-btn">Tidak</button>
            </div>
        </div>
    </div>

    <!-- Modal for Team Info Display -->
    <div class="custom-modal-overlay" id="team-info-modal-overlay">
        <div class="team-info-modal-content">
            <div class="modal-header-title" style="display: flex; flex-direction: column; align-items: center;">
                <img id="team-info-modal-logo" src="" alt="Team Logo" class="modal-header-logo" onerror="this.onerror=null;this.src='https://placehold.co/80x80/cccccc/000000?text=LOGO';"/>
                <h4 id="team-info-modal-team-name"></h4>
            </div>
            <p><strong>Nama Pengurus:</strong> <span id="team-info-manager-name"></span></p>
            <p><strong>No. Telefon:</strong> <span id="team-info-manager-phone"></span></p>
            <h4>Senarai Pemain</h4>
            <table class="player-list-table">
                <thead>
                    <tr>
                        <th>Bil.</th>
                        <th>Nama Pemain</th>
                        <th>No. Jersi</th>
                    </tr>
                </thead>
                <tbody id="team-info-player-list-body">
                    </tbody>
            </table>
            <div class="custom-modal-buttons">
                <button class="cancel-btn" id="team-info-modal-close-btn">Tutup</button>
            </div>
        </div>
    </div>

    <footer>
        <p>&copy; 2024 Kejohanan Bola Sepak Premier. Hak Cipta Terpelihara.</p>
        <p>Dibangunkan dengan semangat kesukanan.</p>    </footer>

    <script>
        // Kunci untuk penyimpanan data dalam localStorage
        const LOCAL_STORAGE_KEY = 'footballTournamentData';
        const LAST_ACTIVE_TAB_KEY = 'lastActiveTab';
        const MATCH_DURATION = 15; // minit
        const BREAK_DURATION_SF = 5; // minit rehat antara separuh akhir
        const BREAK_DURATION_FINAL = 10; // minit rehat antara separuh akhir kedua dan akhir
        const MIN_PLAYERS = 8;
        const MAX_PLAYERS = 15;

        // Struktur data kejohanan
        let tournamentData = {
            allParticipatingTeams: [], // Menyimpan semua pasukan sebelum dibahagikan
            teams: { 'A': [], 'B': [] }, // Kumpulan A dan B akan diisi selepas pembahagian
            matches: [], // Akan dijana
            lastUpdatedMatch: null,
            finalWinner: null,
            finalRunnerUp: null,
            thirdPlaceTeams: [],
            finalScore: null,
            bestPlayer: null, // Changed to null for initial state
            bestPlayerSchool: null, // Changed to null for initial state
            bestGoalkeeper: null, // Changed to null for initial state
            bestGoalkeeperSchool: null, // Changed to null for initial state
            topScorer: null, // Changed to null for initial state
            topScorerSchool: null, // Changed to null for initial state
            countdownStartTime: null,
            countdownEndTime: null,
            groupDivisionDone: false, // Bendera untuk menunjukkan pembahagian telah selesai
            knockoutBracketGenerated: false, // Bendera untuk menunjukkan carta kalah mati telah dijana
            enableExtraTime: false,
            headerLogo: 'https://placehold.co/80x80/007bff/ffffff?text=LOGO' // Default header logo
        };

        let loggedInUser = { role: null, teamName: null }; // Status pengguna yang log masuk
        let countdownInterval = null;

        // --- Fungsi Penyimpanan (LocalStorage) ---
        function saveState() {
            localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(tournamentData));
            localStorage.setItem('loggedInUser', JSON.stringify(loggedInUser));
        }

        function loadState() {
            const savedData = localStorage.getItem(LOCAL_STORAGE_KEY);
            if (savedData) {
                tournamentData = JSON.parse(savedData);
                // Pastikan semua properti yang diperlukan wujud (untuk keserasian data lama)
                if (tournamentData.bestPlayer === undefined) tournamentData.bestPlayer = null;
                if (tournamentData.bestPlayerSchool === undefined) tournamentData.bestPlayerSchool = null;
                if (tournamentData.bestGoalkeeper === undefined) tournamentData.bestGoalkeeper = null;
                if (tournamentData.bestGoalkeeperSchool === undefined) tournamentData.bestGoalkeeperSchool = null;
                if (tournamentData.topScorer === undefined) tournamentData.topScorer = null;
                if (tournamentData.topScorerSchool === undefined) tournamentData.topScorerSchool = null;
                if (tournamentData.finalWinner === undefined) tournamentData.finalWinner = null;
                if (tournamentData.finalRunnerUp === undefined) tournamentData.finalRunnerUp = null;
                if (tournamentData.thirdPlaceTeams === undefined) tournamentData.thirdPlaceTeams = [];
                if (tournamentData.finalScore === undefined) tournamentData.finalScore = null;
                if (tournamentData.countdownEndTime) {
                    tournamentData.countdownEndTime = new Date(tournamentData.countdownEndTime);
                }
                if (tournamentData.countdownStartTime) {
                    tournamentData.countdownStartTime = new Date(tournamentData.countdownStartTime);
                }
                if (typeof tournamentData.groupDivisionDone === 'undefined') {
                    tournamentData.groupDivisionDone = false;
                }
                if (typeof tournamentData.knockoutBracketGenerated === 'undefined') {
                    tournamentData.knockoutBracketGenerated = false;
                }
                if (typeof tournamentData.enableExtraTime === 'undefined') {
                    tournamentData.enableExtraTime = false;
                }
                if (typeof tournamentData.headerLogo === 'undefined') {
                    tournamentData.headerLogo = 'https://placehold.co/80x80/007bff/ffffff?text=LOGO';
                }


                // Pastikan setiap pasukan ada logo, manager info, fairPlayScore dan players jika tiada
                if (tournamentData.allParticipatingTeams) {
                    tournamentData.allParticipatingTeams.forEach(team => {
                        if (!team.logo) team.logo = `https://placehold.co/50x50/cccccc/000000?text=${team.name.substring(0,2).toUpperCase()}`;
                        if (!team.managerUsername) team.managerUsername = team.name.toLowerCase().replace(/\s/g, ''); // Default username
                        if (!team.managerPassword) team.managerPassword = 'password'; // Default password
                        if (!team.managerName) team.managerName = 'Pengurus Belum Ditetapkan';
                        if (!team.managerPhone) team.managerPhone = 'N/A';
                        if (!team.players) team.players = [];
                        if (typeof team.isManagerInfoUpdated === 'undefined') team.isManagerInfoUpdated = false;
                        if (typeof team.fairPlayScore === 'undefined') team.fairPlayScore = Math.floor(Math.random() * 10); // Initialize fair play score

                        // Ensure players have all required fields
                        team.players.forEach(player => {
                            if (!player.idCard) player.idCard = ''; // Keep idCard in data for now, just hide in UI
                            if (!player.jerseyNo) player.jerseyNo = '';
                        });
                    });
                }
                for (const groupKey in tournamentData.teams) {
                    tournamentData.teams[groupKey].forEach(team => {
                        if (!team.logo) team.logo = `https://placehold.co/50x50/cccccc/000000?text=${team.name.substring(0,2).toUpperCase()}`;
                        if (!team.managerUsername) team.managerUsername = team.name.toLowerCase().replace(/\s/g, ''); // Default username
                        if (!team.managerPassword) team.managerPassword = 'password'; // Default password
                        if (!team.managerName) team.managerName = 'Pengurus Belum Ditetapkan';
                        if (!team.managerPhone) team.managerPhone = 'N/A';
                        if (!team.players) team.players = [];
                        if (typeof team.isManagerInfoUpdated === 'undefined') team.isManagerInfoUpdated = false;
                        if (typeof team.fairPlayScore === 'undefined') team.fairPlayScore = Math.floor(Math.random() * 10); // Initialize fair play score
                        team.players.forEach(player => {
                            if (!player.idCard) player.idCard = '';
                            if (!player.jerseyNo) player.jerseyNo = '';
                        });
                    });
                }
                // Initialize new match properties for goals and cards if they don't exist
                tournamentData.matches.forEach(match => {
                    if (!match.homeGoals) match.homeGoals = [];
                    if (!match.awayGoals) match.awayGoals = [];
                    if (!match.homeYellowCards) match.homeYellowCards = [];
                    if (!match.awayYellowCards) match.awayYellowCards = [];
                    if (!match.homeRedCards) match.homeRedCards = [];
                    if (!match.awayRedCards) match.awayRedCards = [];
                });

            } else {
                 tournamentData.groupDivisionDone = false;
                 tournamentData.knockoutBracketGenerated = false;
            }
            const savedUser = localStorage.getItem('loggedInUser');
            if (savedUser) {
                loggedInUser = JSON.parse(savedUser);
            }
        }

        function initializeData() {
            loadState();
            // Set default teams if data is empty (first load)
            if (tournamentData.allParticipatingTeams.length === 0) {
                tournamentData.allParticipatingTeams = [
                    { name: 'KL Saracens', logo: 'https://placehold.co/50x50/cccccc/000000?text=KL', managerUsername: 'klsaracens', managerPassword: 'password', managerName: 'Ahmad Bin Ali', managerPhone: '012-3456789', players: generateDefaultPlayers('KL Saracens'), isManagerInfoUpdated: false, fairPlayScore: Math.floor(Math.random() * 10) },
                    { name: 'PJ Phoenix', logo: 'https://placehold.co/50x50/cccccc/000000?text=PJ', managerUsername: 'pjphoenix', managerPassword: 'password', managerName: 'Siti Aminah', managerPhone: '013-1234567', players: generateDefaultPlayers('PJ Phoenix'), isManagerInfoUpdated: false, fairPlayScore: Math.floor(Math.random() * 10) },
                    { name: 'Subang Wolves', logo: 'https://placehold.co/50x50/cccccc/000000?text=SW', managerUsername: 'subangwolves', managerPassword: 'password', managerName: 'Chong Wei', managerPhone: '014-9876543', players: generateDefaultPlayers('Subang Wolves'), isManagerInfoUpdated: false, fairPlayScore: Math.floor(Math.random() * 10) },
                    { name: 'Gombak Gladiators', logo: 'https://placehold.co/50x50/cccccc/000000?text=GG', managerUsername: 'gombakg', managerPassword: 'password', managerName: 'Muthu Kumar', managerPhone: '019-1122334', players: generateDefaultPlayers('Gombak Gladiators'), isManagerInfoUpdated: false, fairPlayScore: Math.floor(Math.random() * 10) },
                    { name: 'Johor Jaguars', logo: 'https://placehold.co/50x50/cccccc/000000?text=JJ', managerUsername: 'johorj', managerPassword: 'password', managerName: 'Fatima Zahra', managerPhone: '011-2233445', players: generateDefaultPlayers('Johor Jaguars'), isManagerInfoUpdated: false, fairPlayScore: Math.floor(Math.random() * 10) },
                    { name: 'Melaka Mavericks', logo: 'https://placehold.co/50x50/cccccc/000000?text=MM', managerUsername: 'melakam', managerPassword: 'password', managerName: 'Lim Ah Seng', managerPhone: '016-5566778', players: generateDefaultPlayers('Melaka Mavericks'), isManagerInfoUpdated: false, fairPlayScore: Math.floor(Math.random() * 10) },
                    { name: 'Kedah Knights', logo: 'https://placehold.co/50x50/cccccc/000000?text=KK', managerUsername: 'kedahk', managerPassword: 'password', managerName: 'Nurul Huda', managerPhone: '017-8899001', players: generateDefaultPlayers('Kedah Knights'), isManagerInfoUpdated: false, fairPlayScore: Math.floor(Math.random() * 10) },
                    { name: 'Penang Piranhas', logo: 'https://placehold.co/50x50/cccccc/000000?text=PP', managerUsername: 'penangp', managerPassword: 'password', managerName: 'David Lee', managerPhone: '018-3344556', players: generateDefaultPlayers('Penang Piranhas'), isManagerInfoUpdated: false, fairPlayScore: Math.floor(Math.random() * 10) }
                ];
                saveState();
            }
        }

        // Helper function to generate default players
        function generateDefaultPlayers(teamName) {
            const players = [];
            for (let i = 1; i <= MIN_PLAYERS; i++) {
                players.push({
                    name: `Pemain ${i} ${teamName.split(' ')[0]}`,
                    idCard: `IC${Math.floor(100000 + Math.random() * 900000)}`, // Still generate, but not displayed
                    jerseyNo: String(i)
                });
            }
            return players;
        }

        // --- Fungsi Utiliti ---
        function showToast(message, type = 'info') {
            const toastContainer = document.getElementById('toast-container');
            const toast = document.createElement('div');
            toast.classList.add('toast', type);
            const icon = type === 'success' ? '✔' :
                         type === 'error' ? '✖' :
                         type === 'warning' ? '⚠' : 'ℹ';
            toast.innerHTML = `<span class="icon">${icon}</span> ${message}`;
            toastContainer.appendChild(toast);

            setTimeout(() => {
                toast.classList.add('show');
            }, 50);

            setTimeout(() => {
                toast.classList.remove('show');
                toast.addEventListener('transitionend', () => toast.remove());
            }, 3000);
        }

        function formatDate(date) {
            const d = new Date(date);
            const year = d.getFullYear();
            const month = String(d.getMonth() + 1).padStart(2, '0');
            const day = String(d.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
        }

        function formatTime(date) {
            const d = new Date(date);
            const hours = String(d.getHours()).padStart(2, '0');
            const minutes = String(d.getMinutes()).padStart(2, '0');
            return `${hours}:${minutes}`;
        }

        // Fungsi pembantu untuk mengocok array
        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
        }

        // --- Navigasi Tab ---
        document.querySelectorAll('.tab-link').forEach(link => {
            link.addEventListener('click', function(e) {
                e.preventDefault();
                // Close mobile menu if open
                const mobileNavOverlay = document.getElementById('mobile-nav-overlay');
                const hamburgerMenu = document.getElementById('hamburger-menu');
                const navBar = document.querySelector('nav');
                const headerLogo = document.getElementById('header-logo-img');
                const navMobileLogo = document.getElementById('nav-mobile-logo-display');

                if (mobileNavOverlay.classList.contains('active')) {
                    mobileNavOverlay.classList.remove('active');
                    hamburgerMenu.classList.remove('active');
                    hamburgerMenu.classList.remove('active-overlay');
                    navBar.classList.remove('nav-fixed-on-mobile');
                    // Hide mobile nav logo and show header logo again
                    navMobileLogo.style.display = 'none';
                    if (window.innerWidth > 992) { // Only show header logo on desktop
                        headerLogo.style.display = 'block';
                    }
                }

                document.querySelectorAll('.tab-content').forEach(content => {
                    content.classList.remove('active');
                });
                document.querySelectorAll('.tab-link').forEach(link => {
                    link.classList.remove('active');
                });
                // Also remove active from mobile nav links
                document.querySelectorAll('.mobile-nav-links .tab-link').forEach(link => {
                    link.classList.remove('active');
                });


                const targetTabId = this.dataset.tab;
                document.getElementById(targetTabId).classList.add('active');
                this.classList.add('active');
                
                // Also activate the corresponding mobile nav link
                const mobileLink = document.querySelector(`.mobile-nav-links .tab-link[data-tab="${targetTabId}"]`);
                if (mobileLink) {
                    mobileLink.classList.add('active');
                }


                // Save active tab to localStorage
                localStorage.setItem(LAST_ACTIVE_TAB_KEY, targetTabId);

                // Tindakan khusus untuk tab admin/manager
                if (targetTabId === 'admin') {
                    renderLoginPanel(); // Always show login for admin tab
                } else if (targetTabId === 'manager') {
                    if (loggedInUser.role === 'manager') {
                        renderManagerPanel();
                    } else {
                        // If not logged in as manager, redirect to login
                        document.querySelector('.tab-link[data-tab="admin"]').click();
                        showToast('Sila log masuk sebagai pengurus pasukan untuk mengakses panel ini.', 'error');
                    }
                } else {
                    // Hide admin/manager content if not on their respective tabs
                    document.getElementById('admin-content').style.display = 'none';
                    document.getElementById('manager-content').style.display = 'none';
                    document.getElementById('login-section').style.display = 'none'; // Ensure login section is hidden
                }
            });
        });

        // Hamburger menu toggle
        document.getElementById('hamburger-menu').addEventListener('click', function() {
            const mobileNavOverlay = document.getElementById('mobile-nav-overlay');
            const navBar = document.querySelector('nav');
            const headerLogo = document.getElementById('header-logo-img');
            const navMobileLogo = document.getElementById('nav-mobile-logo-display');

            this.classList.toggle('active');
            mobileNavOverlay.classList.toggle('active');
            this.classList.toggle('active-overlay', mobileNavOverlay.classList.contains('active'));
            navBar.classList.toggle('nav-fixed-on-mobile', mobileNavOverlay.classList.contains('active'));

            // Toggle visibility of header logo vs mobile nav logo
            if (mobileNavOverlay.classList.contains('active')) {
                headerLogo.style.display = 'none'; // Hide header logo
                navMobileLogo.src = tournamentData.headerLogo; // Set mobile nav logo src
                navMobileLogo.style.display = 'block'; // Show mobile nav logo
            } else {
                if (window.innerWidth > 992) { // Only show header logo on desktop
                    headerLogo.style.display = 'block'; // Show header logo
                }
                navMobileLogo.style.display = 'none'; // Hide mobile nav logo
            }
        });

        // Close mobile menu when clicking outside (on the overlay itself)
        document.getElementById('mobile-nav-overlay').addEventListener('click', function(event) {
            // Check if the click occurred directly on the overlay, not on the menu itself
            const mobileNavLinks = document.getElementById('mobile-nav-overlay').querySelector('ul');
            const navBar = document.querySelector('nav');
            const hamburgerMenu = document.getElementById('hamburger-menu');
            const headerLogo = document.getElementById('header-logo-img');
            const navMobileLogo = document.getElementById('nav-mobile-logo-display');

            if (!mobileNavLinks.contains(event.target)) {
                hamburgerMenu.classList.remove('active');
                mobileNavOverlay.classList.remove('active');
                hamburgerMenu.classList.remove('active-overlay');
                navBar.classList.remove('nav-fixed-on-mobile');
                
                // Hide mobile nav logo and show header logo again
                navMobileLogo.style.display = 'none';
                if (window.innerWidth > 992) { // Only show header logo on desktop
                    headerLogo.style.display = 'block';
                }
            }
        });


        // --- Logik Log Masuk & Panel ---
        function renderLoginPanel() {
            const loginSection = document.getElementById('login-section');
            const adminContent = document.getElementById('admin-content');
            const managerContent = document.getElementById('manager-content');
            const headerUserInfo = document.getElementById('header-user-info');
            const managerTabLink = document.getElementById('manager-tab-link');
            const mobileManagerTabLink = document.getElementById('mobile-manager-tab-link');

            loginSection.style.display = 'block';
            adminContent.style.display = 'none';
            managerContent.style.display = 'none';
            headerUserInfo.style.display = 'none';
            managerTabLink.style.display = 'none';
            mobileManagerTabLink.style.display = 'none';

            // Populate manager team select dropdown
            const managerTeamSelect = document.getElementById('manager-team-select');
            managerTeamSelect.innerHTML = '<option value="">-- Pilih Pasukan --</option>';
            tournamentData.allParticipatingTeams.sort((a,b) => a.name.localeCompare(b.name)).forEach(team => {
                const option = document.createElement('option');
                option.value = team.name;
                option.textContent = team.name;
                managerTeamSelect.appendChild(option);
            });

            // Show/hide login fields based on role selection
            document.getElementById('user-role').addEventListener('change', function() {
                const role = this.value;
                document.getElementById('admin-login-fields').style.display = role === 'admin' ? 'block' : 'none';
                document.getElementById('manager-login-fields').style.display = role === 'manager' ? 'block' : 'none';
                document.getElementById('login-error').style.display = 'none';
            });
            // Trigger change once to set initial state
            document.getElementById('user-role').dispatchEvent(new Event('change'));

            // If already logged in, bypass login section and show appropriate panel
            if (loggedInUser.role === 'admin') {
                loginSection.style.display = 'none';
                adminContent.style.display = 'block';
                headerUserInfo.style.display = 'flex';
                document.getElementById('loggedInUsername').textContent = 'Admin';
                populateMatchSelect();
                populateEditKnockoutMatchSelect();
                populateRenameTeamSelect();
                loadIndividualAwards();
                document.getElementById('enable-extra-time').checked = tournamentData.enableExtraTime;
                setAdminPanelDefaultDates();
            } else if (loggedInUser.role === 'manager') {
                loginSection.style.display = 'none';
                managerTabLink.style.display = 'block';
                mobileManagerTabLink.style.display = 'block';
                // Automatically activate manager tab if logged in as manager
                document.querySelector('.tab-link[data-tab="manager"]').click();
                headerUserInfo.style.display = 'flex';
                document.getElementById('loggedInUsername').textContent = loggedInUser.teamName;
            }
        }

        function login() {
            const role = document.getElementById('user-role').value;
            const loginError = document.getElementById('login-error');
            loginError.style.display = 'none'; // Reset error message

            if (role === 'admin') {
                const usernameInput = document.getElementById('admin-username').value;
                const passwordInput = document.getElementById('admin-password').value;
                if (usernameInput === 'admin' && passwordInput === '1234') {
                    loggedInUser = { role: 'admin' };
                    showToast('Login Admin berjaya!', 'success');
                    renderLoginPanel(); // Re-render to show admin panel
                } else {
                    loginError.textContent = 'Nama pengguna atau kata laluan Admin salah.';
                    loginError.style.display = 'block';
                    showToast('Login Admin gagal.', 'error');
                }
            } else if (role === 'manager') {
                const selectedTeamName = document.getElementById('manager-team-select').value;
                const managerUsernameInput = document.getElementById('manager-username').value;
                const managerPasswordInput = document.getElementById('manager-password').value;

                if (!selectedTeamName) {
                    loginError.textContent = 'Sila pilih pasukan anda.';
                    loginError.style.display = 'block';
                    showToast('Pilih pasukan anda.', 'error');
                    return;
                }

                const team = tournamentData.allParticipatingTeams.find(t => t.name === selectedTeamName);
                if (team && team.managerUsername === managerUsernameInput && team.managerPassword === managerPasswordInput) {
                    loggedInUser = { role: 'manager', teamName: team.name };
                    showToast(`Login Pengurus Pasukan ${team.name} berjaya!`, 'success');
                    renderLoginPanel(); // Re-render to show manager panel
                } else {
                    loginError.textContent = 'Nama pengguna atau kata laluan Pengurus salah.';
                    loginError.style.display = 'block';
                    showToast('Login Pengurus Pasukan gagal.', 'error');
                }
            }
            saveState();
        }

        function logout() {
            loggedInUser = { role: null, teamName: null };
            showToast('Anda telah log keluar.', 'info');
            saveState();
            // Redirect to home tab and then to login section
            document.querySelector('.tab-link[data-tab="home"]').click();
            document.querySelector('.tab-link[data-tab="admin"]').click(); // This will show the login section
            updateAllViews(); // Ensure UI reflects logout state
        }

        function setAdminPanelDefaultDates() {
            // Muatkan tarikh dan masa mula kira detik
            const countdownStartDateInput = document.getElementById('countdown-start-date');
            const countdownStartTimeInput = document.getElementById('countdown-start-time');

            if (tournamentData.countdownStartTime) {
                countdownStartDateInput.value = formatDate(tournamentData.countdownStartTime);
                countdownStartTimeInput.value = formatTime(tournamentData.countdownStartTime);
            } else {
                const now = new Date();
                now.setHours(now.getHours() + 1); // Default to 1 hour from now
                countdownStartDateInput.value = formatDate(now);
                countdownStartTimeInput.value = formatTime(now);
            }

            // Muatkan tarikh dan masa mula kalah mati
            const knockoutStartDateInput = document.getElementById('knockout-start-date');
            const knockoutStartTimeInput = document.getElementById('knockout-start-time');
            if (!knockoutStartDateInput.value || !knockoutStartTimeInput.value) {
                const defaultKnockoutDate = new Date();
                defaultKnockoutDate.setDate(defaultKnockoutDate.getDate() + 1); // Default to next day
                knockoutStartDateInput.value = formatDate(defaultKnockoutDate);
                knockoutStartTimeInput.value = '20:00'; // Default 8 PM
            }

            // Muatkan tarikh dan masa mula perlawanan kumpulan (untuk input yang digabungkan)
            const groupMatchDateInput = document.getElementById('group-match-date');
            const groupMatchTimeInput = document.getElementById('group-match-time');
            // Jika sudah ada perlawanan kumpulan, ambil tarikh/masa perlawanan kumpulan pertama
            const firstGroupMatch = tournamentData.matches.find(m => m.type === 'group');
            if (firstGroupMatch) {
                groupMatchDateInput.value = firstGroupMatch.date;
                groupMatchTimeInput.value = firstGroupMatch.time;
            } else {
                // Jika tiada perlawanan, tetapkan lalai ke esok hari 8:00 AM
                const defaultGroupDate = new Date();
                defaultGroupDate.setDate(defaultGroupDate.getDate() + 1);
                defaultGroupDate.setHours(8, 0, 0, 0);
                groupMatchDateInput.value = formatDate(defaultGroupDate);
                groupMatchTimeInput.value = formatTime(defaultGroupDate);
            }
        }

        function renderManagerPanel() {
            const managerContent = document.getElementById('manager-content');
            const loginSection = document.getElementById('login-section');
            const adminContent = document.getElementById('admin-content');
            const headerUserInfo = document.getElementById('header-user-info');
            const managerTeamDisplayName = document.getElementById('manager-team-display-name');
            const managerEditTeamName = document.getElementById('manager-edit-team-name');
            const managerEditManagerName = document.getElementById('manager-edit-manager-name');
            const managerEditManagerPhone = document.getElementById('manager-edit-manager-phone');
            const saveTeamInfoBtn = document.getElementById('saveTeamInfoBtn');
            const addPlayerBtn = document.getElementById('addPlayerBtn');
            const savePlayersBtn = document.getElementById('savePlayersBtn');
            const playerActionsHeader = document.getElementById('player-actions-header');
            const managerEditLockedMessage = document.getElementById('manager-edit-locked-message');

            loginSection.style.display = 'none';
            adminContent.style.display = 'none';
            managerContent.style.display = 'block';
            headerUserInfo.style.display = 'flex';
            document.getElementById('loggedInUsername').textContent = loggedInUser.teamName;

            const currentTeam = tournamentData.allParticipatingTeams.find(t => t.name === loggedInUser.teamName);
            if (!currentTeam) {
                showToast('Ralat: Maklumat pasukan tidak ditemui.', 'error');
                logout();
                return;
            }

            managerTeamDisplayName.textContent = currentTeam.name;
            managerEditTeamName.value = currentTeam.name;
            managerEditManagerName.value = currentTeam.managerName;
            managerEditManagerPhone.value = currentTeam.managerPhone;

            renderPlayerList(currentTeam.players);

            // Disable editing if group division is done
            const isLocked = tournamentData.groupDivisionDone;
            managerEditTeamName.disabled = isLocked;
            document.getElementById('manager-edit-team-logo-file').disabled = isLocked;
            managerEditManagerName.disabled = isLocked;
            managerEditManagerPhone.disabled = isLocked;
            saveTeamInfoBtn.disabled = isLocked;
            addPlayerBtn.disabled = isLocked;
            savePlayersBtn.disabled = isLocked;

            // Hide/show action column in player table
            playerActionsHeader.style.display = isLocked ? 'none' : 'table-cell';
            document.querySelectorAll('.player-list-table .player-action-cell').forEach(cell => {
                cell.style.display = isLocked ? 'none' : 'table-cell';
            });

            managerEditLockedMessage.style.display = isLocked ? 'block' : 'none';
        }

        // --- Manager Panel: Player List Management ---
        function renderPlayerList(players) {
            const playerListBody = document.getElementById('player-list-body');
            playerListBody.innerHTML = '';
            document.getElementById('player-count').textContent = players.length;

            const isLocked = tournamentData.groupDivisionDone;

            // Adjust colspan based on whether actions column is visible
            const colspan = isLocked ? 3 : 4;

            if (players.length === 0) {
                playerListBody.innerHTML = `<tr><td colspan="${colspan}" style="text-align: center; color: #777; font-style: italic;">Tiada pemain dalam senarai. Sila tambah pemain.</td></tr>`;
            }

            players.forEach((player, index) => {
                const row = playerListBody.insertRow();
                row.innerHTML = `
                    <td>${index + 1}</td>
                    <td><input type="text" value="${player.name}" data-field="name" ${isLocked ? 'disabled' : ''}/></td>
                    <td><input type="number" value="${player.jerseyNo}" data-field="jerseyNo" min="1" max="99" ${isLocked ? 'disabled' : ''}/></td>
                    <td class="player-action-cell" style="display: ${isLocked ? 'none' : 'table-cell'};">
                        <button onclick="removePlayer(${index})" style="background-color: var(--danger-color);">Buang</button>
                    </td>
                `;
            });
        }

        function addPlayer() {
            const currentTeam = tournamentData.allParticipatingTeams.find(t => t.name === loggedInUser.teamName);
            if (!currentTeam) return;

            if (currentTeam.players.length >= MAX_PLAYERS) {
                showToast(`Maksimum ${MAX_PLAYERS} pemain dibenarkan.`, 'error');
                return;
            }

            currentTeam.players.push({ name: '', idCard: '', jerseyNo: '' }); // idCard still stored, but not displayed
            renderPlayerList(currentTeam.players);
            showToast('Pemain baru ditambah. Sila isi butiran.', 'info');
        }

        function removePlayer(index) {
            showConfirmationModal('Adakah anda pasti ingin membuang pemain ini?', (confirmed) => {
                if (confirmed) {
                    const currentTeam = tournamentData.allParticipatingTeams.find(t => t.name === loggedInUser.teamName);
                    if (!currentTeam) return;

                    if (currentTeam.players.length <= MIN_PLAYERS) {
                        showToast(`Minimum ${MIN_PLAYERS} pemain diperlukan.`, 'error');
                        return;
                    }

                    currentTeam.players.splice(index, 1);
                    renderPlayerList(currentTeam.players);
                    showToast('Pemain berjaya dibuang.', 'success');
                    saveState(); // Save immediately after removing
                }
            });
        }

        function savePlayers() {
            const currentTeam = tournamentData.allParticipatingTeams.find(t => t.name === loggedInUser.teamName);
            if (!currentTeam) return;

            const playerRows = document.querySelectorAll('#player-list-body tr');
            const updatedPlayers = [];
            let isValid = true;

            playerRows.forEach(row => {
                const nameInput = row.querySelector('input[data-field="name"]');
                const jerseyNoInput = row.querySelector('input[data-field="jerseyNo"]');

                const name = nameInput ? nameInput.value.trim() : '';
                const jerseyNo = jerseyNoInput ? jerseyNoInput.value.trim() : '';

                if (!name || !jerseyNo) {
                    isValid = false;
                    showToast('Sila isi semua medan pemain.', 'error');
                    return;
                }
                if (isNaN(parseInt(jerseyNo)) || parseInt(jerseyNo) < 1 || parseInt(jerseyNo) > 99) {
                    isValid = false;
                    showToast('Nombor jersi mesti antara 1 dan 99.', 'error');
                    return;
                }
                // Retain existing idCard if it exists, otherwise assign a placeholder
                const existingPlayer = currentTeam.players.find(p => p.name === name && p.jerseyNo === jerseyNo);
                const idCard = existingPlayer ? existingPlayer.idCard : `IC${Math.floor(100000 + Math.random() * 900000)}`;

                updatedPlayers.push({ name, idCard, jerseyNo });
            });

            if (!isValid) return;

            if (updatedPlayers.length < MIN_PLAYERS || updatedPlayers.length > MAX_PLAYERS) {
                showToast(`Jumlah pemain mesti antara ${MIN_PLAYERS} dan ${MAX_PLAYERS}.`, 'error');
                return;
            }

            currentTeam.players = updatedPlayers;
            // Set a flag or update a property to indicate manager info is updated
            currentTeam.isManagerInfoUpdated = true; // New flag to track this
            saveState();
            renderPlayerList(currentTeam.players); // Re-render to ensure display is updated
            showToast('Senarai pemain berjaya disimpan.', 'success');
            renderParticipatingTeams(); // Re-render team cards to show info link if applicable
        }

        function saveTeamInfo() {
            const currentTeam = tournamentData.allParticipatingTeams.find(t => t.name === loggedInUser.teamName);
            if (!currentTeam) return;

            const newTeamName = document.getElementById('manager-edit-team-name').value.trim();
            const newManagerName = document.getElementById('manager-edit-manager-name').value.trim();
            const newManagerPhone = document.getElementById('manager-edit-manager-phone').value.trim();
            const newTeamLogoFile = document.getElementById('manager-edit-team-logo-file');

            if (!newTeamName || !newManagerName || !newManagerPhone) {
                showToast('Sila isi semua maklumat pasukan.', 'error');
                return;
            }

            // Check for duplicate team name if changed
            if (newTeamName !== currentTeam.name && tournamentData.allParticipatingTeams.some(t => t.name === newTeamName)) {
                showToast('Nama pasukan ini sudah wujud. Sila pilih nama lain.', 'error');
                return;
            }

            const oldTeamName = currentTeam.name;

            const updateTeamDataWithLogo = (logoData = currentTeam.logo) => {
                currentTeam.name = newTeamName;
                currentTeam.managerName = newManagerName;
                currentTeam.managerPhone = newManagerPhone;
                currentTeam.logo = logoData;
                currentTeam.isManagerInfoUpdated = true; // Set flag when manager updates info

                // Update references in group teams if group division done
                if (tournamentData.groupDivisionDone) {
                    for (const groupKey in tournamentData.teams) {
                        tournamentData.teams[groupKey].forEach(team => {
                            if (team.name === oldTeamName) {
                                if (newName) team.name = newTeamName; // Use newName if available
                                team.managerName = newManagerName;
                                team.managerPhone = newManagerPhone;
                                team.logo = logoData;
                                team.isManagerInfoUpdated = true;
                            }
                        });
                    }
                }

                // Update references in matches
                tournamentData.matches.forEach(match => {
                    if (match.homeTeam === oldTeamName) match.homeTeam = newTeamName;
                    if (match.awayTeam === oldTeamName) match.awayTeam = newTeamName;
                });

                // Update references in final results
                if (tournamentData.finalWinner === oldTeamName) tournamentData.finalWinner = newTeamName;
                if (tournamentData.finalRunnerUp === oldTeamName) tournamentData.finalRunnerUp = newTeamName;
                tournamentData.thirdPlaceTeams = tournamentData.thirdPlaceTeams.map(team => team === oldTeamName ? newTeamName : team);

                loggedInUser.teamName = newTeamName; // Update logged in user's team name
                showToast('Maklumat pasukan berjaya disimpan!', 'success');
                updateAllViews();
                renderManagerPanel(); // Re-render manager panel to update display name
                populateMatchSelect(); // Update dropdowns in admin panel if manager changes team name
                populateEditKnockoutMatchSelect();
                populateRenameTeamSelect();
            };

            if (newTeamLogoFile.files.length > 0) {
                const file = newTeamLogoFile.files[0];
                const reader = new FileReader();
                reader.onload = (e) => {
                    updateTeamDataWithLogo(e.target.result);
                };
                reader.onerror = () => {
                    showToast('Gagal membaca fail logo. Menggunakan logo sedia ada.', 'warning');
                    updateTeamDataWithLogo(); // Proceed with existing logo
                };
                reader.readAsDataURL(file);
            } else {
                updateTeamDataWithLogo(); // No new logo, use existing
            }
        }


        // Isikan dropdown perlawanan untuk kemas kini skor
        function populateMatchSelect() {
            const matchSelect = document.getElementById('match-select');
            matchSelect.innerHTML = '<option value="">-- Pilih Perlawanan --</option>';

            // Isikan perlawanan kumpulan dahulu, kemudian kalah mati
            const groupMatches = tournamentData.matches.filter(m => m.type === 'group').sort((a, b) => {
                const dateA = new Date(`${a.date}T${a.time}`);
                const dateB = new Date(`${b.date}T${b.time}`);
                return dateA - dateB;
            });
            const knockoutMatches = tournamentData.matches.filter(m => m.type === 'knockout').sort((a, b) => {
                const dateA = new Date(`${a.date}T${a.time}`);
                const dateB = new Date(`${b.date}T${b.time}`);
                return dateA - dateB;
            });

            groupMatches.forEach(match => {
                const option = document.createElement('option');
                option.value = match.id;
                let scoreDisplay = '';
                if (match.played) {
                    scoreDisplay = ` (${match.homeScore} - ${match.awayScore})`;
                }
                option.textContent = `${match.homeTeam} vs ${match.awayTeam} (Kumpulan ${match.group}, ${match.date} ${match.time})${scoreDisplay}`;
                matchSelect.appendChild(option);
            });

            knockoutMatches.forEach(match => {
                const option = document.createElement('option');
                option.value = match.id;
                let scoreDisplay = '';
                if (match.played) {
                    scoreDisplay = ` (${match.homeScore} - ${match.awayScore}`;
                    if (match.homePenalties !== null && match.awayPenalties !== null) {
                        scoreDisplay += ` Penalti: ${match.homePenalties} - ${match.awayPenalties})`;
                    } else {
                        scoreDisplay += `)`;
                    }
                }
                option.textContent = `${match.round}: ${match.homeTeam} vs ${match.awayTeam} (${match.date} ${match.time})${scoreDisplay}`;
                matchSelect.appendChild(option);
            });

            document.getElementById('match-preview').style.display = 'none';
            document.getElementById('score-home').value = 0;
            document.getElementById('score-away').value = 0;
            document.getElementById('home-yellow-cards-count').value = 0;
            document.getElementById('home-red-cards-count').value = 0;
            document.getElementById('away-yellow-cards-count').value = 0;
            document.getElementById('away-red-cards-count').value = 0;
            document.getElementById('penalty-inputs').style.display = 'none';
            document.getElementById('penalty-home').value = 0;
            document.getElementById('penalty-away').value = 0;

            // Clear goal/card inputs
            document.getElementById('home-goals-input-container').innerHTML = '';
            document.getElementById('away-goals-input-container').innerHTML = '';
            document.getElementById('home-yellow-cards-input-container').innerHTML = '';
            document.getElementById('away-yellow-cards-input-container').innerHTML = '';
            document.getElementById('home-red-cards-input-container').innerHTML = '';
            document.getElementById('away-red-cards-input-container').innerHTML = '';
        }

        function displayMatchPreview() {
            const matchSelect = document.getElementById('match-select');
            const selectedMatchId = matchSelect.value;
            const matchPreviewDiv = document.getElementById('match-preview');
            const scoreHomeInput = document.getElementById('score-home');
            const scoreAwayInput = document.getElementById('score-away');
            const penaltyInputsDiv = document.getElementById('penalty-inputs');
            const penaltyHomeInput = document.getElementById('penalty-home');
            const penaltyAwayInput = document.getElementById('penalty-away');

            // Clear previous goal/card inputs and counts
            document.getElementById('home-goals-input-container').innerHTML = '';
            document.getElementById('away-goals-input-container').innerHTML = '';
            document.getElementById('home-yellow-cards-input-container').innerHTML = '';
            document.getElementById('away-yellow-cards-input-container').innerHTML = '';
            document.getElementById('home-red-cards-input-container').innerHTML = '';
            document.getElementById('away-red-cards-input-container').innerHTML = '';

            document.getElementById('score-home').value = 0;
            document.getElementById('score-away').value = 0;
            document.getElementById('home-yellow-cards-count').value = 0;
            document.getElementById('home-red-cards-count').value = 0;
            document.getElementById('away-yellow-cards-count').value = 0;
            document.getElementById('away-red-cards-count').value = 0;


            if (selectedMatchId) {
                const match = tournamentData.matches.find(m => m.id === selectedMatchId);
                matchPreviewDiv.innerHTML = `Perlawanan: <strong>${match.homeTeam}</strong> vs <strong>${match.awayTeam}</strong><br>
                                            Tarikh: ${match.date} ${match.time}`;
                matchPreviewDiv.style.display = 'block';

                scoreHomeInput.value = match.homeScore !== null ? match.homeScore : 0;
                scoreAwayInput.value = match.awayScore !== null ? match.awayScore : 0;

                // Set card counts
                document.getElementById('home-yellow-cards-count').value = match.homeYellowCards.length;
                document.getElementById('home-red-cards-count').value = match.homeRedCards.length;
                document.getElementById('away-yellow-cards-count').value = match.awayYellowCards.length;
                document.getElementById('away-red-cards-count').value = match.awayRedCards.length;


                // Tunjukkan input penalti hanya untuk perlawanan kalah mati yang sudah dimainkan atau akan dimainkan
                if (match.type === 'knockout') {
                    penaltyInputsDiv.style.display = 'block';
                    penaltyHomeInput.value = match.homePenalties !== null ? match.homePenalties : 0;
                    penaltyAwayInput.value = match.awayPenalties !== null ? match.awayPenalties : 0;
                } else {
                    penaltyInputsDiv.style.display = 'none';
                    penaltyHomeInput.value = 0;
                    penaltyAwayInput.value = 0;
                }

                // Populate dynamic inputs based on current scores or existing data
                autoGenerateEventInputs('home', 'goal', match);
                autoGenerateEventInputs('home', 'yellow', match);
                autoGenerateEventInputs('home', 'red', match);
                autoGenerateEventInputs('away', 'goal', match);
                autoGenerateEventInputs('away', 'yellow', match);
                autoGenerateEventInputs('away', 'red', match);

            } else {
                matchPreviewDiv.style.display = 'none';
                scoreHomeInput.value = 0;
                scoreAwayInput.value = 0;
                penaltyInputsDiv.style.display = 'none';
                penaltyHomeInput.value = 0;
                penaltyAwayInput.value = 0;
                
                // Clear all dynamic inputs when no match is selected
                document.getElementById('home-goals-input-container').innerHTML = '';
                document.getElementById('away-goals-input-container').innerHTML = '';
                document.getElementById('home-yellow-cards-input-container').innerHTML = '';
                document.getElementById('away-yellow-cards-input-container').innerHTML = '';
                document.getElementById('home-red-cards-input-container').innerHTML = '';
                document.getElementById('away-red-cards-input-container').innerHTML = '';
            }
        }

        /**
         * Automatically generates event input fields (goal/card) based on count.
         * @param {string} teamType - 'home' or 'away'
         * @param {string} eventType - 'goal', 'yellow', 'red'
         * @param {object} [matchData] - Optional: the current match object to pre-fill data.
         */
        function autoGenerateEventInputs(teamType, eventType, matchData = null) {
            const matchSelect = document.getElementById('match-select');
            const selectedMatchId = matchSelect.value;
            if (!selectedMatchId) return; // Do nothing if no match is selected

            const match = matchData || tournamentData.matches.find(m => m.id === selectedMatchId);
            if (!match) return;

            let currentCountInput;
            let container;
            let existingEvents;

            if (eventType === 'goal') {
                currentCountInput = document.getElementById(`score-${teamType}`);
                container = document.getElementById(`${teamType}-goals-input-container`);
                existingEvents = match[`${teamType}Goals`];
            } else if (eventType === 'yellow') {
                currentCountInput = document.getElementById(`${teamType}-yellow-cards-count`);
                container = document.getElementById(`${teamType}-yellow-cards-input-container`);
                existingEvents = match[`${teamType}YellowCards`];
            } else if (eventType === 'red') {
                currentCountInput = document.getElementById(`${teamType}-red-cards-count`);
                container = document.getElementById(`${teamType}-red-cards-input-container`);
                existingEvents = match[`${teamType}RedCards`];
            } else {
                return; // Invalid eventType
            }

            const currentCount = parseInt(currentCountInput.value) || 0;
            const existingInputs = container.querySelectorAll('.event-input-group');

            // Determine which team's players to list
            const teamName = teamType === 'home' ? match.homeTeam : match.awayTeam;
            const teamPlayers = tournamentData.allParticipatingTeams.find(t => t.name === teamName)?.players || [];

            // Remove excess inputs
            for (let i = existingInputs.length - 1; i >= currentCount; i--) {
                existingInputs[i].remove();
            }

            // Add new inputs or re-populate existing ones
            for (let i = 0; i < currentCount; i++) {
                const eventData = existingEvents[i] || { player: '', minute: '' }; // No jersey field here
                if (i < existingInputs.length) {
                    // Update existing input
                    const group = existingInputs[i];
                    const playerSelect = group.querySelector('select[data-field="player"]');
                    const minuteInput = group.querySelector('input[data-field="minute"]');

                    // Re-populate player dropdown with current team's players
                    playerSelect.innerHTML = '<option value="">-- Pilih Pemain --</option>';
                    teamPlayers.forEach(player => {
                        const option = document.createElement('option');
                        option.value = player.name; // Store just player name as value
                        option.textContent = `${player.name} (Jersi: ${player.jerseyNo})`; // Display name and jersey
                        option.setAttribute('data-jersey', player.jerseyNo); // Store jersey as data attribute
                        playerSelect.appendChild(option);
                    });
                    // Select the correct player if it exists
                    if (eventData.player) {
                        const selectedOption = playerSelect.querySelector(`option[value="${eventData.player}"]`);
                        if (selectedOption) {
                            selectedOption.selected = true;
                        } else {
                            // If player not found (e.g., team name changed, player removed), add it as a selected option
                            // and use the stored jersey if available, otherwise '??'
                            const existingOption = document.createElement('option');
                            existingOption.value = eventData.player;
                            existingOption.textContent = `${eventData.player} (Jersi: ${eventData.jersey || '??'}) (Pemain Tidak Ditemui)`;
                            existingOption.selected = true;
                            existingOption.setAttribute('data-jersey', eventData.jersey || '');
                            playerSelect.prepend(existingOption);
                        }
                    }

                    minuteInput.value = eventData.minute || '';

                } else {
                    // Add new input
                    if (eventType === 'goal') {
                        addGoalInput(teamType, teamPlayers, eventData);
                    } else {
                        addCardInput(teamType, eventType, teamName, eventData);
                    }
                }
            }
        }


        // Helper to add goal input fields
        function addGoalInput(teamType, teamPlayers, goal = { player: '', minute: '' }) {
            const container = document.getElementById(`${teamType}-goals-input-container`);
            const div = document.createElement('div');
            div.classList.add('event-input-group');

            // Create minute input FIRST
            const minuteInput = document.createElement('input');
            minuteInput.type = 'number';
            minuteInput.placeholder = 'Minit';
            minuteInput.min = '1';
            minuteInput.max = '90';
            minuteInput.setAttribute('data-field', 'minute');
            minuteInput.value = goal.minute || '';

            // Create player dropdown SECOND
            const playerSelect = document.createElement('select');
            playerSelect.setAttribute('data-field', 'player');
            playerSelect.innerHTML = '<option value="">-- Pilih Pemain --</option>';
            teamPlayers.forEach(player => {
                const option = document.createElement('option');
                option.value = player.name; // Store just player name as value
                option.textContent = `${player.name} (Jersi: ${player.jerseyNo})`; // Display name and jersey
                option.setAttribute('data-jersey', player.jerseyNo); // Store jersey as data attribute
                if (goal.player && goal.player === player.name) {
                    option.selected = true;
                }
                playerSelect.appendChild(option);
            });
            // If the goal.player is not in the current teamPlayers, add it as a selected option
            if (goal.player && !teamPlayers.some(p => p.name === goal.player)) {
                const existingOption = document.createElement('option');
                existingOption.value = goal.player;
                existingOption.textContent = `${goal.player} (Jersi: ${goal.jersey || '??'}) (Pemain Tidak Ditemui)`;
                existingOption.selected = true;
                existingOption.setAttribute('data-jersey', goal.jersey || '');
                playerSelect.prepend(existingOption); // Add to the top
            }

            const removeButton = document.createElement('button');
            removeButton.type = 'button';
            removeButton.classList.add('remove-event-button');
            removeButton.style.backgroundColor = 'var(--danger-color)';
            removeButton.textContent = 'Buang';
            removeButton.onclick = () => {
                div.remove();
                // When a goal is manually removed, decrease the score input
                const scoreInput = document.getElementById(`score-${teamType}`);
                scoreInput.value = Math.max(0, parseInt(scoreInput.value) - 1);
                // Trigger autoGenerateEventInputs to re-sync the view
                autoGenerateEventInputs(teamType, 'goal');
            };

            div.appendChild(minuteInput); // Minit dahulu
            div.appendChild(playerSelect); // Kemudian pemain
            div.appendChild(removeButton);
            container.appendChild(div);
        }

        // Helper to add card input fields
        function addCardInput(teamType, cardType, teamName, card = { player: '', minute: '' }) {
            const container = document.getElementById(`${teamType}-${cardType}-cards-input-container`);
            const div = document.createElement('div');
            div.classList.add('event-input-group');

            const teamPlayers = tournamentData.allParticipatingTeams.find(t => t.name === teamName)?.players || [];

            // Create minute input FIRST
            const minuteInput = document.createElement('input');
            minuteInput.type = 'number';
            minuteInput.placeholder = 'Minit';
            minuteInput.min = '1';
            minuteInput.max = '90';
            minuteInput.setAttribute('data-field', 'minute');
            minuteInput.value = card.minute || '';

            // Create player dropdown SECOND
            const playerSelect = document.createElement('select');
            playerSelect.setAttribute('data-field', 'player');
            playerSelect.innerHTML = '<option value="">-- Pilih Pemain --</option>';
            teamPlayers.forEach(player => {
                const option = document.createElement('option');
                option.value = player.name; // Store just player name as value
                option.textContent = `${player.name} (Jersi: ${player.jerseyNo})`; // Display name and jersey
                option.setAttribute('data-jersey', player.jerseyNo); // Store jersey as data attribute
                if (card.player && card.player === player.name) {
                    option.selected = true;
                }
                playerSelect.appendChild(option);
            });
            // If the card.player is not in the current teamPlayers, add it as a selected option
            if (card.player && !teamPlayers.some(p => p.name === card.player)) {
                const existingOption = document.createElement('option');
                existingOption.value = card.player;
                existingOption.textContent = `${card.player} (Jersi: ${card.jersey || '??'}) (Pemain Tidak Ditemui)`;
                existingOption.selected = true;
                existingOption.setAttribute('data-jersey', card.jersey || '');
                playerSelect.prepend(existingOption);
            }

            const removeButton = document.createElement('button');
            removeButton.type = 'button';
            removeButton.classList.add('remove-event-button');
            removeButton.style.backgroundColor = 'var(--danger-color)';
            removeButton.textContent = 'Buang';
            removeButton.onclick = () => {
                div.remove();
                // When a card is manually removed, decrease the card count input
                const cardCountInput = document.getElementById(`${teamType}-${cardType}-cards-count`);
                cardCountInput.value = Math.max(0, parseInt(cardCountInput.value) - 1);
                // Trigger autoGenerateEventInputs to re-sync the view
                autoGenerateEventInputs(teamType, cardType);
            };

            div.appendChild(minuteInput); // Minit dahulu
            div.appendChild(playerSelect); // Kemudian pemain
            div.appendChild(removeButton);
            container.appendChild(div);
        }

        // Helper to read dynamic inputs
        function readDynamicInputs(containerId) {
            const container = document.getElementById(containerId);
            const inputs = [];
            container.querySelectorAll('.event-input-group').forEach(group => {
                const playerSelect = group.querySelector('select[data-field="player"]');
                const minuteInput = group.querySelector('input[data-field="minute"]');

                const player = playerSelect ? playerSelect.value.trim() : '';
                const minute = minuteInput ? minuteInput.value.trim() : '';

                // Get jersey from the selected option's data-jersey attribute
                const selectedOption = playerSelect.options[playerSelect.selectedIndex];
                const jersey = selectedOption ? selectedOption.dataset.jersey : '';

                if (player && minute) {
                    inputs.push({ player, jersey: parseInt(jersey), minute: parseInt(minute) });
                }
            });
            return inputs;
        }


        function updateMatchResult() {
            const matchSelect = document.getElementById('match-select');
            const selectedMatchId = matchSelect.value;
            const scoreHome = parseInt(document.getElementById('score-home').value);
            const scoreAway = parseInt(document.getElementById('score-away').value);
            const penaltyHome = parseInt(document.getElementById('penalty-home').value);
            const penaltyAway = parseInt(document.getElementById('penalty-away').value);

            if (!selectedMatchId) {
                showToast('Sila pilih perlawanan untuk dikemas kini.', 'error');
                return;
            }
            if (isNaN(scoreHome) || isNaN(scoreAway) || scoreHome < 0 || scoreAway < 0) {
                 showToast('Jaringan tidak sah. Sila masukkan nombor positif.', 'error');
                 return;
             }

            const match = tournamentData.matches.find(m => m.id === selectedMatchId);

            // Batalkan mata sebelumnya sebelum menerapkan yang baru jika perlawanan sudah dimainkan
            if (match.played) {
                revertMatchResults(match);
            }

            match.homeScore = scoreHome;
            match.awayScore = scoreAway;
            match.played = true;

            if (match.type === 'knockout') {
                if (scoreHome === scoreAway) {
                    if (isNaN(penaltyHome) || isNaN(penaltyAway) || penaltyHome < 0 || penaltyAway < 0) {
                        showToast('Jaringan penalti tidak sah. Sila masukkan nombor positif.', 'error');
                        match.played = false;
                        return;
                    }
                    match.homePenalties = penaltyHome;
                    match.awayPenalties = penaltyAway;
                } else {
                    match.homePenalties = null;
                    match.awayPenalties = null;
                }
            } else {
                match.homePenalties = null;
                match.awayPenalties = null;
            }

            // Collect goals and cards
            match.homeGoals = readDynamicInputs('home-goals-input-container');
            match.awayGoals = readDynamicInputs('away-goals-input-container');
            match.homeYellowCards = readDynamicInputs('home-yellow-cards-input-container');
            match.awayYellowCards = readDynamicInputs('away-yellow-cards-input-container');
            match.homeRedCards = readDynamicInputs('home-red-cards-input-container');
            match.awayRedCards = readDynamicInputs('away-red-cards-input-container');


            applyMatchResults(match);

            tournamentData.lastUpdatedMatch = { ...match };
            updateAllViews();
            populateMatchSelect();
            showToast('Keputusan perlawanan berjaya dikemas kini!', 'success');
        }

        // Helper function to generate round-robin matches for a single group
        function generateGroupRoundRobin(teams) {
            const n = teams.length;
            let currentTeams = [...teams]; // Work with a mutable copy

            // Add a dummy team if odd number of teams for round-robin calculation
            if (n % 2 !== 0) {
                currentTeams.push('BYE_TEAM_PLACEHOLDER');
            }
            const numTeams = currentTeams.length;
            const rounds = [];

            for (let r = 0; r < numTeams - 1; r++) {
                const currentRoundMatches = [];
                for (let i = 0; i < numTeams / 2; i++) {
                    const home = currentTeams[i];
                    const away = currentTeams[numTeams - 1 - i];
                    if (home !== 'BYE_TEAM_PLACEHOLDER' && away !== 'BYE_TEAM_PLACEHOLDER') {
                        currentRoundMatches.push([home, away]);
                    }
                }
                rounds.push(currentRoundMatches);

                // Rotate teams (except the first one)
                const lastTeam = currentTeams.pop();
                currentTeams.splice(1, 0, lastTeam);
            }
            return rounds;
        }

        /**
         * Menjana dan menetapkan masa kepada perlawanan kumpulan.
         * Dipanggil selepas pembahagian kumpulan selesai.
         * @param {string} startDateStr - Tarikh mula perlawanan pertama.
         * @param {string} startTimeStr - Masa mula perlawanan pertama.
         */
        function generateGroupFixtures(startDateStr, startTimeStr) {
            if (!startDateStr || !startTimeStr) {
                showToast('Sila masukkan tarikh dan masa mula perlawanan kumpulan.', 'error');
                return;
            }
            if (tournamentData.allParticipatingTeams.length < 4) {
                showToast('Sila tambah sekurang-kurangnya 4 pasukan untuk menjana jadual kumpulan.', 'error');
                return;
            }
            if (!tournamentData.groupDivisionDone) {
                showToast('Pembahagian kumpulan belum selesai. Sila mulakan kira detik pembahagian kumpulan terlebih dahulu.', 'error');
                return;
            }

            // Buang semua perlawanan kumpulan sedia ada
            tournamentData.matches = tournamentData.matches.filter(m => m.type !== 'group');

            let currentMatchTime = new Date(`${startDateStr}T${startTimeStr}`);
            let matchIdCounter = 1;

            const teamsA = tournamentData.teams.A.map(t => t.name);
            const teamsB = tournamentData.teams.B.map(t => t.name);

            if (teamsA.length < 2 || teamsB.length < 2) {
                showToast('Setiap kumpulan mesti mempunyai sekurang-kurangnya 2 pasukan untuk menjana jadual.', 'error');
                return;
            }

            // Generate full round-robin matches for each group
            let roundsA = generateGroupRoundRobin(teamsA).map(round => [...round]);
            let roundsB = generateGroupRoundRobin(teamsB).map(round => [...round]);

            const finalScheduledMatches = [];
            let teamsPlayedInLastSlot = new Set();

            let currentRoundIndexA = 0;
            let currentRoundIndexB = 0;
            let currentGroupTurn = 'A';

            let safetyCounter = 0;
            const MAX_ITERATIONS = (roundsA.flat().length + roundsB.flat().length) * 5;

            while ((currentRoundIndexA < roundsA.length || currentRoundIndexB < roundsB.length) && safetyCounter < MAX_ITERATIONS) {
                safetyCounter++;
                let potentialMatch = null;

                const findSuitableMatch = (roundMatches, groupName, currentRoundIdx) => {
                    for (let i = 0; i < roundMatches.length; i++) {
                        const [home, away] = roundMatches[i];
                        if (!teamsPlayedInLastSlot.has(home) && !teamsPlayedInLastSlot.has(away)) {
                            return { pair: roundMatches.splice(i, 1)[0], group: groupName, roundIdx: currentRoundIdx };
                        }
                    }
                    return null;
                };

                // Attempt to schedule a match for currentGroupTurn
                if (currentGroupTurn === 'A' && currentRoundIndexA < roundsA.length && roundsA[currentRoundIndexA].length > 0) {
                    potentialMatch = findSuitableMatch(roundsA[currentRoundIndexA], 'A', currentRoundIndexA);
                }
                if (!potentialMatch && currentGroupTurn === 'B' && currentRoundIndexB < roundsB.length && roundsB[currentRoundIndexB].length > 0) {
                    potentialMatch = findSuitableMatch(roundsB[currentRoundIndexB], 'B', currentRoundIndexB);
                }
                // Fallback: if no match found for current turn, try the other group even if it's not their turn
                if (!potentialMatch && currentGroupTurn === 'A' && currentRoundIndexB < roundsB.length && roundsB[currentRoundIndexB].length > 0) {
                    potentialMatch = findSuitableMatch(roundsB[currentRoundIndexB], 'B', currentRoundIndexB);
                } else if (!potentialMatch && currentGroupTurn === 'B' && currentRoundIndexA < roundsA.length && roundsA[currentRoundIndexA].length > 0) {
                    potentialMatch = findSuitableMatch(roundsA[currentRoundIndexA], 'A', currentRoundIndexA);
                }


                if (potentialMatch) {
                    const [homeTeam, awayTeam] = potentialMatch.pair;
                    finalScheduledMatches.push({
                        id: `${potentialMatch.group}${matchIdCounter++}`,
                        group: potentialMatch.group,
                        homeTeam: homeTeam,
                        awayTeam: awayTeam,
                        date: formatDate(currentMatchTime),
                        time: formatTime(currentMatchTime),
                        homeScore: null,
                        awayScore: null,
                        played: false,
                        type: 'group',
                        homeGoals: [], // Initialize new properties
                        awayGoals: [],
                        homeYellowCards: [],
                        awayYellowCards: [],
                        homeRedCards: [],
                        awayRedCards: []
                    });

                    // Update teams played in this slot for the *next* slot's check
                    teamsPlayedInLastSlot.clear();
                    teamsPlayedInLastSlot.add(homeTeam);
                    teamsPlayedInLastSlot.add(awayTeam);

                    // Advance to next round if current round is empty
                    if (potentialMatch.group === 'A' && roundsA[potentialMatch.roundIdx].length === 0) {
                        currentRoundIndexA++;
                    } else if (potentialMatch.group === 'B' && roundsB[potentialMatch.roundIdx].length === 0) {
                        currentRoundIndexB++;
                    }
                    // Switch group turn for the *next* slot
                    currentGroupTurn = (potentialMatch.group === 'A') ? 'B' : 'A';

                    // Advance time for the next match slot
                    currentMatchTime.setMinutes(currentMatchTime.getMinutes() + MATCH_DURATION + BREAK_DURATION_SF); // Using SF break for group matches for simplicity

                } else {
                    // No suitable match found in this slot for either group.
                    // This means all available matches are blocked by the 'teamsPlayedInLastSlot' constraint.
                    // We need to advance time and clear the constraint to avoid infinite loops.
                    currentMatchTime.setMinutes(currentMatchTime.getMinutes() + MATCH_DURATION + BREAK_DURATION_SF); // Advance time
                    teamsPlayedInLastSlot.clear(); // Crucial: allow any team to play in the *next* slot
                    // Do NOT switch `currentGroupTurn` here, as the current group might have available matches
                    // if the `teamsPlayedInLastSlot` constraint is removed.
                }
            }

            // Check if all matches were scheduled
            const totalExpectedMatches = (teamsA.length * (teamsA.length - 1) / 2) + (teamsB.length * (teamsB.length - 1) / 2);
            const remainingMatches = roundsA.flat().length + roundsB.flat().length;
            if (remainingMatches > 0) {
                showToast('Penjadualan tidak dapat menyelesaikan semua perlawanan. Kekangan mungkin terlalu ketat atau jumlah pasukan tidak sesuai untuk penjadualan.', 'error');
            } else {
                 showToast('Jadual perlawanan kumpulan berjaya dijana!', 'success');
            }


            // Sort all group matches by time for display
            finalScheduledMatches.sort((a,b) => new Date(`${a.date}T${a.time}`) - new Date(`${b.date}T${b.time}`));
            tournamentData.matches = tournamentData.matches.filter(m => m.type !== 'group').concat(finalScheduledMatches);

            // Reset all group team stats because fixtures are regenerated
            for (const groupKey in tournamentData.teams) {
                tournamentData.teams[groupKey].forEach(team => {
                    team.P = 0; team.M = 0; team.S = 0; team.K = 0;
                    team.J = 0; team.B = 0; team.diff = 0; team.points = 0;
                    team.qualified = false;
                    team.fairPlayScore = Math.floor(Math.random() * 10); // Re-randomize fair play score
                });
            }

            // Jadualkan perlawanan kalah mati untuk Hari 2 (atau tarikh yang ditetapkan admin)
            updateKnockoutFixtureDates(false); // Kemas kini tarikh kalah mati tanpa menunjukkan toast
            updateAllViews();
            populateMatchSelect(); // Muat semula dropdown
        }


        // Fungsi untuk mengemas kini tarikh dan masa perlawanan kalah mati secara pukal
        function updateKnockoutFixtureDates(showSuccessToast = true) {
            const startDateStr = document.getElementById('knockout-start-date').value;
            const startTimeStr = document.getElementById('knockout-start-time').value;

            if (!startDateStr || !startTimeStr) {
                if (showSuccessToast) showToast('Sila masukkan tarikh dan masa mula perlawanan kalah mati.', 'error');
                return;
            }

            let knockoutCurrentTime = new Date(`${startDateStr}T${startTimeStr}`);

            const sf1 = tournamentData.matches.find(m => m.id === 'SF1');
            const sf2 = tournamentData.matches.find(m => m.id === 'SF2');
            const finalMatch = tournamentData.matches.find(m => m.id === 'Final');

            if (sf1) {
                sf1.date = formatDate(knockoutCurrentTime);
                sf1.time = formatTime(knockoutCurrentTime);
            }
            // Masa untuk SF2: SF1_start + MATCH_DURATION + BREAK_DURATION_SF
            knockoutCurrentTime.setMinutes(knockoutCurrentTime.getMinutes() + MATCH_DURATION + BREAK_DURATION_SF);
            if (sf2) {
                sf2.date = formatDate(knockoutCurrentTime);
                sf2.time = formatTime(knockoutCurrentTime);
            }
            // Masa untuk Final: SF2_start + MATCH_DURATION + BREAK_DURATION_FINAL
            knockoutCurrentTime.setMinutes(knockoutCurrentTime.getMinutes() + MATCH_DURATION + BREAK_DURATION_FINAL);
            if (finalMatch) {
                finalMatch.date = formatDate(knockoutCurrentTime);
                finalMatch.time = formatTime(knockoutCurrentTime);
            }

            if (showSuccessToast) showToast('Tarikh dan masa perlawanan kalah mati berjaya dikemas kini!', 'success');
            updateAllViews();
            populateMatchSelect();
            populateEditKnockoutMatchSelect();
        }


        function addDefaultKnockoutMatches() {
            // Pastikan perlawanan kalah mati dijana pada Hari 2
            let knockoutStartTime = new Date();
            knockoutStartTime.setDate(knockoutStartTime.getDate() + 1); // Hari kedua
            knockoutStartTime.setHours(20, 0, 0, 0); // Mulakan pada 8 PM

            const sf1Date = formatDate(knockoutStartTime);
            const sf1Time = formatTime(knockoutStartTime);

            // Masa untuk SF2: SF1_start + MATCH_DURATION + BREAK_DURATION_SF
            knockoutStartTime.setMinutes(knockoutStartTime.getMinutes() + MATCH_DURATION + BREAK_DURATION_SF);
            const sf2Date = formatDate(knockoutStartTime);
            const sf2Time = formatTime(knockoutStartTime);

            // Masa untuk Final: SF2_start + MATCH_DURATION + BREAK_DURATION_FINAL
            knockoutStartTime.setMinutes(knockoutStartTime.getMinutes() + MATCH_DURATION + BREAK_DURATION_FINAL);
            const finalDate = formatDate(knockoutStartTime);
            const finalTime = formatTime(knockoutStartTime);

            // Buang perlawanan kalah mati sedia ada sebelum menambah yang baru
            tournamentData.matches = tournamentData.matches.filter(m => m.type !== 'knockout');

            tournamentData.matches.push(
                { id: 'SF1', group: 'knockout', round: 'Separuh Akhir', homeTeam: 'Winner Group A', awayTeam: 'Runner-up Group B', date: sf1Date, time: sf1Time, homeScore: null, awayScore: null, played: false, type: 'knockout', loser: null, homePenalties: null, awayPenalties: null, homeGoals: [], awayGoals: [], homeYellowCards: [], awayYellowCards: [], homeRedCards: [], awayRedCards: [] },
                { id: 'SF2', group: 'knockout', round: 'Separuh Akhir', homeTeam: 'Winner Group B', awayTeam: 'Runner-up Group A', date: sf2Date, time: sf2Time, homeScore: null, awayScore: null, played: false, type: 'knockout', loser: null, homePenalties: null, awayPenalties: null, homeGoals: [], awayGoals: [], homeYellowCards: [], awayYellowCards: [], homeRedCards: [], awayRedCards: [] },
                { id: 'Final', group: 'knockout', round: 'Akhir', homeTeam: 'Winner SF1', awayTeam: 'Winner SF2', date: finalDate, time: finalTime, homeScore: null, awayScore: null, played: false, type: 'knockout', loser: null, homePenalties: null, awayPenalties: null, homeGoals: [], awayGoals: [], homeYellowCards: [], awayYellowCards: [], homeRedCards: [], awayRedCards: [] }
            );
            tournamentData.knockoutBracketGenerated = true; // Tandakan bracket telah dijana
        }

        function resetKnockoutBracket() {
            showConfirmationModal('Adakah anda pasti ingin menetapkan semula carta kalah mati? Ini akan mengosongkan semua keputusan kalah mati dan menetapkan semula pasukan kepada placeholder.', (confirmed) => {
                if (confirmed) {
                    addDefaultKnockoutMatches(); // Menjana semula dengan pasukan placeholder
                    tournamentData.finalWinner = null;
                    tournamentData.finalRunnerUp = null;
                    tournamentData.thirdPlaceTeams = [];
                    tournamentData.finalScore = null;
                    showToast('Carta kalah mati telah ditetapkan semula.', 'info');
                    updateAllViews();
                    populateMatchSelect();
                    populateEditKnockoutMatchSelect();
                } else {
                    showToast('Pembatalan penetapan semula carta kalah mati.', 'info');
                }
            });
        }

        function toggleExtraTime() {
            tournamentData.enableExtraTime = document.getElementById('enable-extra-time').checked;
            saveState();
            showToast(`Masa Tambahan kini ${tournamentData.enableExtraTime ? 'Dibenarkan' : 'Tidak Dibenarkan'}.`, 'info');
        }


        // --- Urus Butiran Perlawanan Kalah Mati (Tarikh, Masa) ---
        function populateEditKnockoutMatchSelect() {
            const editMatchSelect = document.getElementById('edit-knockout-match-select');
            editMatchSelect.innerHTML = '<option value="">-- Pilih Perlawanan --</option>';

            const knockoutMatches = tournamentData.matches.filter(m => m.type === 'knockout').sort((a,b) => new Date(`${a.date}T${a.time}`) - new Date(`${b.date}T${b.time}`));

            knockoutMatches.forEach(match => {
                const option = document.createElement('option');
                option.value = match.id;
                option.textContent = `${match.round}: ${match.homeTeam} vs ${match.awayTeam} (${match.date} ${match.time})`;
                editMatchSelect.appendChild(option);
            });
            document.getElementById('edit-knockout-match-details').style.display = 'none';
        }

        function loadKnockoutMatchDetailsForEdit() {
            const selectedMatchId = document.getElementById('edit-knockout-match-select').value;
            const editMatchDetailsDiv = document.getElementById('edit-knockout-match-details');
            const editDateInput = document.getElementById('edit-knockout-date');
            const editTimeInput = document.getElementById('edit-knockout-time');

            if (selectedMatchId) {
                const match = tournamentData.matches.find(m => m.id === selectedMatchId);
                if (match) {
                    editDateInput.value = match.date;
                    editTimeInput.value = match.time;
                    editMatchDetailsDiv.style.display = 'block';
                }
            } else {
                editMatchDetailsDiv.style.display = 'none';
            }
        }

        function saveKnockoutMatchDetails() {
            const selectedMatchId = document.getElementById('edit-knockout-match-select').value;
            const newDate = document.getElementById('edit-knockout-date').value;
            const newTime = document.getElementById('edit-knockout-time').value;

            if (!selectedMatchId) {
                showToast('Sila pilih perlawanan kalah mati untuk dikemas kini.', 'error');
                return;
            }
            if (!newDate || !newTime) {
                showToast('Sila masukkan tarikh dan masa perlawanan kalah mati.', 'error');
                return;
            }

            const match = tournamentData.matches.find(m => m.id === selectedMatchId);
            if (match) {
                match.date = newDate;
                match.time = newTime;
                showToast('Butiran perlawanan kalah mati berjaya dikemas kini!', 'success');
                updateAllViews();
                populateMatchSelect(); // Muat semula semua dropdown
                populateEditKnockoutMatchSelect(); // Muat semula dropdown edit
                document.getElementById('edit-knockout-match-details').style.display = 'none'; // Sembunyikan borang selepas menyimpan
            } else {
                showToast('Perlawanan kalah mati tidak ditemui.', 'error');
            }
        }

        /**
         * Menguruskan kira detik pembahagian kumpulan dan kemudian menjana jadual perlawanan kumpulan.
         * Ini adalah fungsi yang dipanggil oleh butang gabungan di Panel Admin.
         */
        function startGroupDivisionAndGenerateFixtures() {
            const groupMatchDateStr = document.getElementById('group-match-date').value;
            const groupMatchTimeStr = document.getElementById('group-match-time').value;
            const countdownStartDateStr = document.getElementById('countdown-start-date').value;
            const countdownStartTimeStr = document.getElementById('countdown-start-time').value;
            const durationInput = document.getElementById('countdown-duration-input');
            const duration = parseInt(durationInput.value);

            if (!groupMatchDateStr || !groupMatchTimeStr || !countdownStartDateStr || !countdownStartTimeStr) {
                showToast('Sila masukkan semua tarikh dan masa yang diperlukan.', 'error');
                return;
            }
            if (isNaN(duration) || duration <= 0) {
                showToast('Sila masukkan tempoh kira detik yang sah (dalam saat).', 'error');
                return;
            }
            if (tournamentData.allParticipatingTeams.length < 4) {
                showToast('Sila tambah sekurang-kurangnya 4 pasukan sebelum memulakan proses ini.', 'error');
                return;
            }

            const selectedCountdownStartTime = new Date(`${countdownStartDateStr}T${countdownStartTimeStr}`);
            if (isNaN(selectedCountdownStartTime.getTime())) {
                showToast('Tarikh atau masa mula kira detik tidak sah.', 'error');
                return;
            }

            showConfirmationModal(`Kira detik pembahagian kumpulan akan bermula pada ${formatDate(selectedCountdownStartTime)} ${formatTime(selectedCountdownStartTime)} dan berlangsung selama ${duration} saat. Setelah selesai, pasukan akan dibahagikan secara rawak dan jadual perlawanan kumpulan akan dijana secara automatik. Adakah anda pasti?`, (confirmed) => {
                if (confirmed) {
                    tournamentData.countdownStartTime = selectedCountdownStartTime;
                    tournamentData.countdownEndTime = new Date(selectedCountdownStartTime.getTime() + duration * 1000);
                    tournamentData.groupDivisionDone = false; // Set semula status pembahagian
                    showToast('Kira detik pembahagian kumpulan bermula!', 'info');
                    saveState();
                    updateCountdownDisplay(); // Mula kemas kini paparan kira detik
                } else {
                    showToast('Pembatalan proses.', 'info');
                }
            });
        }


        function updateCountdownDisplay() {
            const countdownEl = document.getElementById('group-division-countdown');
            const messageEl = document.getElementById('group-division-message');

            if (countdownInterval) {
                clearInterval(countdownInterval);
            }

            const now = new Date();

            if (tournamentData.countdownStartTime && tournamentData.countdownEndTime) {
                if (now < tournamentData.countdownStartTime) {
                    // Kira detik belum bermula
                    countdownEl.textContent = 'Akan Datang';
                    messageEl.textContent = `Pembahagian kumpulan akan bermula pada ${formatDate(tournamentData.countdownStartTime)} ${formatTime(tournamentData.countdownStartTime)}.`;
                    countdownInterval = setInterval(() => updateCountdownDisplay(), 1000); // Terus semak sehingga masa mula
                } else if (now >= tournamentData.countdownStartTime && now < tournamentData.countdownEndTime) {
                    // Kira detik sedang berjalan
                    const distance = tournamentData.countdownEndTime - now;
                    const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                    const seconds = Math.floor((distance % (1000 * 60)) / 1000);

                    countdownEl.textContent = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
                    messageEl.textContent = 'Pembahagian kumpulan akan bermula dalam...';
                    countdownInterval = setInterval(() => updateCountdownDisplay(), 1000); // Terus kira detik

                    if (distance < 0) { // Ini akan berlaku pada akhir kira detik
                        clearInterval(countdownInterval);
                        countdownEl.textContent = '00:00';
                        messageEl.textContent = 'Pembahagian kumpulan selesai!';
                        // Panggil performGroupDivision dengan tarikh/masa mula yang ditetapkan admin
                        const groupMatchDateStr = document.getElementById('group-match-date').value;
                        const groupMatchTimeStr = document.getElementById('group-match-time').value;
                        performGroupDivision(groupMatchDateStr, groupMatchTimeStr);
                        showToast('Pembahagian kumpulan automatik selesai!', 'success');
                    }
                } else {
                    // Kira detik sudah tamat
                    clearInterval(countdownInterval);
                    countdownEl.textContent = 'Selesai!';
                    messageEl.textContent = 'Pasukan telah dibahagikan ke kumpulan.';
                    if (!tournamentData.groupDivisionDone) {
                         // Jika sudah tamat dan belum dibahagikan, lakukan pembahagian dan penjanaan jadual
                         const groupMatchDateStr = document.getElementById('group-match-date').value;
                         const groupMatchTimeStr = document.getElementById('group-match-time').value;
                         performGroupDivision(groupMatchDateStr, groupMatchTimeStr);
                    }
                }
            } else if (tournamentData.groupDivisionDone) {
                // Jika sudah selesai tetapi tiada countdownEndTime (contoh: dimuatkan dari localStorage lama)
                countdownEl.textContent = 'Selesai!';
                messageEl.textContent = 'Pasukan telah dibahagikan ke kumpulan.';
            } else {
                // Keadaan awal atau reset
                countdownEl.textContent = '00:00';
                messageEl.textContent = 'Kira detik akan bermula dari Panel Admin.';
            }
            saveState(); // Simpan keadaan kira detik
        }

        /**
         * Melakukan pembahagian kumpulan rawak dan kemudian menjana jadual perlawanan kumpulan.
         * @param {string} startDateStr - Tarikh mula perlawanan pertama.
         * @param {string} startTimeStr - Masa mula perlawanan pertama.
         */
        function performGroupDivision(startDateStr, startTimeStr) {
            if (tournamentData.groupDivisionDone) return;
            if (tournamentData.allParticipatingTeams.length < 4) {
                showToast('Tidak cukup pasukan untuk pembahagian kumpulan. Sila tambah sekurang-kurangnya 4 pasukan.', 'error');
                return;
            }
            randomlyAssignTeamsToGroups();
            tournamentData.groupDivisionDone = true;
            tournamentData.knockoutBracketGenerated = true; // Set to true here to enable bracket rendering logic
            tournamentData.countdownEndTime = null;
            tournamentData.countdownStartTime = null;

            // Panggil generateGroupFixtures dengan tarikh dan masa yang diberikan
            generateGroupFixtures(startDateStr, startTimeStr); // Ini akan mengemas kini tournamentData.matches

            updateAllViews();
            showToast('Pembahagian kumpulan automatik selesai dan jadual dijana!', 'success');
        }

        function randomlyAssignTeamsToGroups() {
            let allTeams = [...tournamentData.allParticipatingTeams];
            // Kocok pasukan
            shuffleArray(allTeams);

            // Bahagikan kepada Kumpulan A dan B
            tournamentData.teams.A = allTeams.slice(0, Math.ceil(allTeams.length / 2)).map(team => ({
                ...team, P: 0, M: 0, S: 0, K: 0, J: 0, B: 0, diff: 0, points: 0, qualified: false
            }));
            tournamentData.teams.B = allTeams.slice(Math.ceil(allTeams.length / 2)).map(team => ({
                ...team, P: 0, M: 0, S: 0, K: 0, J: 0, B: 0, diff: 0, points: 0, qualified: false
            }));

            // Reset semua perlawanan kumpulan sedia ada sebelum penjanaan baru
            tournamentData.matches = tournamentData.matches.filter(m => m.type !== 'group');
        }


        // --- Ubah Nama Pasukan & Logo ---
        function populateRenameTeamSelect() {
            const renameTeamSelect = document.getElementById('rename-team-select');
            renameTeamSelect.innerHTML = '<option value="">-- Pilih Pasukan --</option>';

            const allTeams = [...tournamentData.allParticipatingTeams].sort((a, b) => a.name.localeCompare(b.name));

            allTeams.forEach(team => {
                const option = document.createElement('option');
                option.value = team.name; // Simpan nama asal
                option.textContent = `${team.name}`;
                renameTeamSelect.appendChild(option);
            });
            // Kosongkan input selepas memuat semula
            document.getElementById('new-team-name').value = '';
            document.getElementById('new-team-logo-file').value = ''; // Reset input file
        }

        function renameTeam() {
            const renameTeamSelect = document.getElementById('rename-team-select');
            const selectedTeamName = renameTeamSelect.value;
            const newTeamNameInput = document.getElementById('new-team-name');
            const newTeamLogoFile = document.getElementById('new-team-logo-file');
            const newName = newTeamNameInput.value.trim();

            if (!selectedTeamName) {
                showToast('Sila pilih pasukan untuk diubah.', 'error');
                return;
            }
            if (!newName && newTeamLogoFile.files.length === 0) {
                showToast('Sila masukkan nama pasukan baharu atau muat naik logo baharu.', 'error');
                return;
            }

            let teamToUpdate = tournamentData.allParticipatingTeams.find(t => t.name === selectedTeamName);
            if (!teamToUpdate) {
                showToast('Pasukan tidak ditemui.', 'error');
                return;
            }

            // Cek jika nama baru sudah ada dan berbeza dari nama asal
            const allTeamNames = tournamentData.allParticipatingTeams.map(t => t.name);
            if (newName && allTeamNames.includes(newName) && newName !== selectedTeamName) {
                showToast('Nama pasukan baharu sudah wujud. Sila pilih nama lain.', 'error');
                return;
            }

            const updateTeamData = (logoData = null) => {
                // Kemas kini objek pasukan dalam allParticipatingTeams
                if (newName) teamToUpdate.name = newName;
                if (logoData) teamToUpdate.logo = logoData;

                // Jika kumpulan sudah dibahagikan, perlu mengemas kini pasukan dalam kumpulan A/B juga
                if (tournamentData.groupDivisionDone) {
                    for (const groupKey in tournamentData.teams) {
                        tournamentData.teams[groupKey].forEach(team => {
                            if (team.name === selectedTeamName) {
                                if (newName) team.name = newName; // Use newName if available
                                team.managerName = newManagerName;
                                team.managerPhone = newManagerPhone;
                                team.logo = logoData;
                                team.isManagerInfoUpdated = true;
                            }
                        });
                    }
                }

                // Kemas kini semua perlawanan di mana pasukan ini terlibat
                tournamentData.matches.forEach(match => {
                    if (match.homeTeam === selectedTeamName) {
                        match.homeTeam = newName || match.homeTeam;
                        // Update player names in match events if player names are affected by team name change
                        match.homeGoals.forEach(g => { if (g.player.includes(selectedTeamName)) g.player = g.player.replace(selectedTeamName, newName); });
                        match.homeYellowCards.forEach(c => { if (c.player.includes(selectedTeamName)) c.player = c.player.replace(selectedTeamName, newName); });
                        match.homeRedCards.forEach(c => { if (c.player.includes(selectedTeamName)) c.player = c.player.replace(selectedTeamName, newName); });
                    }
                    if (match.awayTeam === selectedTeamName) {
                        match.awayTeam = newName || match.awayTeam;
                        match.awayGoals.forEach(g => { if (g.player.includes(selectedTeamName)) g.player = g.player.replace(selectedTeamName, newName); });
                        match.awayYellowCards.forEach(c => { if (c.player.includes(selectedTeamName)) c.player = c.player.replace(selectedTeamName, newName); });
                        match.awayRedCards.forEach(c => { if (c.player.includes(selectedTeamName)) c.player = c.player.replace(selectedTeamName, newName); });
                    }
                });


                // Kemas kini pemenang/naib juara/tempat ketiga jika pasukan terlibat
                if (tournamentData.finalWinner === selectedTeamName) tournamentData.finalWinner = newName;
                if (tournamentData.finalRunnerUp === selectedTeamName) tournamentData.finalRunnerUp = newName;
                tournamentData.thirdPlaceTeams = tournamentData.thirdPlaceTeams.map(team => team === selectedTeamName ? newName : team);

                showToast(`Pasukan '${selectedTeamName}' telah diubah.`, 'success');
                newTeamNameInput.value = ''; // Kosongkan input
                newTeamLogoFile.value = ''; // Reset input file
                updateAllViews();
                populateMatchSelect();
                populateEditKnockoutMatchSelect();
                populateRenameTeamSelect();
            };

            if (newTeamLogoFile.files.length > 0) {
                const file = newTeamLogoFile.files[0];
                const reader = new FileReader();
                reader.onload = (e) => {
                    updateTeamData(e.target.result); // Simpan sebagai Data URL
                };
                reader.onerror = () => {
                    showToast('Gagal membaca fail logo. Menggunakan logo lalai.', 'warning');
                    updateTeamData(teamToUpdate.logo); // Use existing logo if no new file
                };
                reader.readAsDataURL(file); // Baca fail sebagai Data URL (Base64)
            } else {
                // Tiada logo file disediakan, gunakan placeholder
                updateTeamData(teamToUpdate.logo); // Use existing logo if no new file
            }
        }

        // --- Tambah/Buang Pasukan ---
        function addTeam() {
            const newTeamName = document.getElementById('add-team-name').value.trim();
            const newTeamLogoFile = document.getElementById('add-team-logo-file');
            const newManagerUsername = document.getElementById('new-team-manager-username').value.trim();
            const newManagerPassword = document.getElementById('new-team-manager-password').value.trim();

            if (!newTeamName) {
                showToast('Sila masukkan nama pasukan.', 'error');
                return;
            }
            if (!newManagerUsername || !newManagerPassword) {
                 showToast('Sila masukkan nama pengguna dan kata laluan pengurus untuk pasukan baharu.', 'error');
                 return;
             }

            const allTeamNames = tournamentData.allParticipatingTeams.map(t => t.name);
            if (allTeamNames.includes(newTeamName)) {
                showToast('Nama pasukan sudah wujud.', 'error');
                return;
            }
            // Check for duplicate manager username across all teams
            if (tournamentData.allParticipatingTeams.some(team => team.managerUsername === newManagerUsername)) {
                 showToast('Nama pengguna pengurus ini sudah wujud. Sila pilih nama pengguna lain.', 'error');
                 return;
             }


            const processAddTeam = (logoData) => {
                const newTeam = {
                    name: newTeamName,
                    logo: logoData,
                    managerUsername: newManagerUsername,
                    managerPassword: newManagerPassword,
                    managerName: 'Pengurus Belum Ditetapkan', // Default manager name
                    managerPhone: 'N/A', // Default phone
                    players: generateDefaultPlayers(newTeamName), // Default players
                    isManagerInfoUpdated: false, // New team, so manager info is not yet updated
                    fairPlayScore: Math.floor(Math.random() * 10) // Assign a random fair play score
                };
                tournamentData.allParticipatingTeams.push(newTeam);

                // If group division is already done, re-assign teams to groups and regenerate fixtures.
                if (tournamentData.groupDivisionDone) {
                    // Re-assign teams to groups and regenerate fixtures using the current admin input for start time
                    const startDateStr = document.getElementById('group-match-date').value;
                    const startTimeStr = document.getElementById('group-match-time').value;
                    if (startDateStr && startTimeStr) {
                        randomlyAssignTeamsToGroups(); // Re-assign teams to A/B
                        generateGroupFixtures(startDateStr, startTimeStr); // Re-generate and time fixtures
                    } else {
                        showToast('Sila tetapkan tarikh dan masa mula perlawanan kumpulan di Panel Admin untuk menjana semula jadual.', 'warning');
                        randomlyAssignTeamsToGroups(); // Still re-assign groups even if fixtures can't be timed
                    }
                }

                document.getElementById('add-team-name').value = '';
                newTeamLogoFile.value = ''; // Reset input file
                document.getElementById('new-team-manager-username').value = '';
                document.getElementById('new-team-manager-password').value = '';
                showToast(`${newTeamName} telah ditambah.`, 'success');
                updateAllViews();
                populateMatchSelect();
                populateEditKnockoutMatchSelect();
                populateRenameTeamSelect();
                renderLoginPanel(); // Update manager team select dropdown
            };

            if (newTeamLogoFile.files.length > 0) {
                const file = newTeamLogoFile.files[0];
                const reader = new FileReader();
                reader.onload = (e) => {
                    processAddTeam(e.target.result); // Simpan sebagai Data URL
                };
                reader.onerror = () => {
                    showToast('Gagal membaca fail logo. Menggunakan logo lalai.', 'warning');
                    processAddTeam(`https://placehold.co/50x50/cccccc/000000?text=${newTeamName.substring(0,2).toUpperCase()}`);
                };
                reader.readAsDataURL(file); // Baca fail sebagai Data URL (Base64)
            } else {
                // Tiada logo file disediakan, gunakan placeholder
                processAddTeam(`https://placehold.co/50x50/cccccc/000000?text=${newTeamName.substring(0,2).toUpperCase()}`);
            }
        }

        // Fungsi untuk menunjukkan modal pengesahan buang pasukan
        function showRemoveTeamConfirmation() {
            showConfirmationModal('Adakah anda pasti ingin membuang pasukan ini? Tindakan ini tidak boleh diundur.', (confirmed) => {
                if (confirmed) {
                    const teamToRemove = prompt("Masukkan nama pasukan yang ingin dibuang (contoh: 'Harimau Malaya'):");
                    if (teamToRemove) {
                        removeTeam(teamToRemove.trim());
                    } else {
                        showToast('Pembatalan pembuangan pasukan.', 'info');
                    }
                } else {
                    showToast('Pembatalan pembuangan pasukan.', 'info');
                }
            });
        }

        function removeTeam(teamName) {
            let teamRemoved = false;

            // Buang dari allParticipatingTeams
            const initialAllTeamsLength = tournamentData.allParticipatingTeams.length;
            tournamentData.allParticipatingTeams = tournamentData.allParticipatingTeams.filter(team => team.name !== teamName);
            if (tournamentData.allParticipatingTeams.length < initialAllTeamsLength) {
                teamRemoved = true;
            }

            if (teamRemoved) {
                // Buang juga perlawanan yang melibatkan pasukan ini
                tournamentData.matches = tournamentData.matches.filter(m => m.homeTeam !== teamName && m.awayTeam !== teamName);

                // Kemas kini pemenang/naib juara/tempat ketiga jika pasukan terlibat
                if (tournamentData.finalWinner === teamName) tournamentData.finalWinner = null;
                if (tournamentData.finalRunnerUp === teamName) tournamentData.finalRunnerUp = null;
                tournamentData.thirdPlaceTeams = tournamentData.thirdPlaceTeams.filter(team => team !== teamName);

                // Jika pembahagian kumpulan sudah selesai, perlu menjana semula kumpulan
                if (tournamentData.groupDivisionDone) {
                    const startDateStr = document.getElementById('group-match-date').value;
                    const startTimeStr = document.getElementById('group-match-time').value;
                    if (startDateStr && startTimeStr) {
                        randomlyAssignTeamsToGroups(); // Re-assign teams to A/B
                        generateGroupFixtures(startDateStr, startTimeStr); // Re-generate and time fixtures
                    } else {
                        showToast('Sila tetapkan tarikh dan masa mula perlawanan kumpulan di Panel Admin untuk menjana semula jadual.', 'warning');
                        randomlyAssignTeamsToGroups(); // Still re-assign groups even if fixtures can't be timed
                    }
                } else {
                    updateAllViews();
                }

                showToast(`${teamName} dan perlawanannya telah dibuang.`, 'success');
                populateMatchSelect();
                populateEditKnockoutMatchSelect();
                populateRenameTeamSelect();
                renderLoginPanel(); // Update manager team select dropdown
            } else {
                showToast(`Pasukan '${teamName}' tidak ditemui.`, 'error');
            }
        }


        // --- Logik Teras untuk Kedudukan dan Kalah Mati ---
        function applyMatchResults(match) {
            if (match.type === 'group') {
                const homeTeam = tournamentData.teams[match.group].find(t => t.name === match.homeTeam);
                const awayTeam = tournamentData.teams[match.group].find(t => t.name === match.awayTeam);

                if (!homeTeam || !awayTeam) return;

                homeTeam.P++;
                awayTeam.P++;
                homeTeam.J += match.homeScore;
                homeTeam.B += match.awayScore;
                awayTeam.J += match.awayScore;
                awayTeam.B += match.homeScore;
                homeTeam.diff = homeTeam.J - homeTeam.B;
                awayTeam.diff = awayTeam.J - awayTeam.B;

                if (match.homeScore > match.awayScore) {
                    homeTeam.M++;
                    awayTeam.K++;
                    homeTeam.points += 3;
                } else if (match.homeScore < match.awayScore) {
                    awayTeam.M++;
                    homeTeam.K++;
                    awayTeam.points += 3;
                } else {
                    homeTeam.S++;
                    awayTeam.S++;
                    homeTeam.points += 1;
                    awayTeam.points += 1;
                }
            } else if (match.type === 'knockout') {
                let winner = null;
                let loser = null;

                if (match.homeScore > match.awayScore) {
                    winner = match.homeTeam;
                    loser = match.awayTeam;
                } else if (match.homeScore < match.awayScore) {
                    winner = match.awayTeam;
                    loser = match.homeTeam;
                } else {
                    // Skor seri, gunakan penalti
                    if (match.homePenalties !== null && match.awayPenalties !== null) {
                        if (match.homePenalties > match.awayPenalties) {
                            winner = match.homeTeam;
                            loser = match.awayTeam;
                        } else if (match.homePenalties < match.awayPenalties) {
                            winner = match.awayTeam;
                            loser = match.homeTeam;
                        } else {
                            // Jika penalti pun seri, secara lalai home team menang (ini boleh diubah jika ada peraturan lain)
                            winner = match.homeTeam;
                            loser = match.awayTeam;
                        }
                    } else {
                        winner = null;
                        loser = null;
                        match.played = false; // Jika seri dan tiada penalti, perlawanan belum selesai
                    }
                }
                match.loser = loser;

                if (match.round === 'Separuh Akhir') {
                    // Pastikan loser ditambah hanya sekali
                    if (loser && !tournamentData.thirdPlaceTeams.includes(loser)) {
                        tournamentData.thirdPlaceTeams.push(loser);
                    }
                    // Buang loser jika perlawanan dibatalkan atau diubah
                    if (match.played && match.loser === null) { // Jika perlawanan diubah dan tiada loser lagi
                         tournamentData.thirdPlaceTeams = tournamentData.thirdPlaceTeams.filter(team => team !== match.loser);
                    }


                    const nextMatchId = 'Final';
                    const nextMatch = tournamentData.matches.find(m => m.id === nextMatchId);

                    if (nextMatch && winner) {
                        if (match.id === 'SF1') {
                            nextMatch.homeTeam = winner;
                        } else {
                            nextMatch.awayTeam = winner;
                        }
                    }
                } else if (match.round === 'Akhir') {
                    tournamentData.finalWinner = winner;
                    tournamentData.finalRunnerUp = loser;
                    tournamentData.finalScore = `${match.homeScore} - ${match.awayScore}`;
                }
            }
        }

        function revertMatchResults(match) {
            if (match.type === 'group' && match.played) {
                const homeTeam = tournamentData.teams[match.group].find(t => t.name === match.homeTeam);
                const awayTeam = tournamentData.teams[match.group].find(t => t.name === match.awayTeam);

                if (!homeTeam || !awayTeam) return;

                homeTeam.P--;
                awayTeam.P--;
                homeTeam.J -= match.homeScore;
                homeTeam.B -= match.awayScore;
                awayTeam.J -= match.awayScore;
                awayTeam.B -= match.homeScore;
                homeTeam.diff = homeTeam.J - homeTeam.B;
                awayTeam.diff = awayTeam.J - awayTeam.B;

                if (match.homeScore > match.awayScore) {
                    homeTeam.M--;
                    awayTeam.K--;
                    homeTeam.points -= 3;
                } else if (match.homeScore < match.awayScore) {
                    awayTeam.M--;
                    homeTeam.K--;
                    awayTeam.points -= 3;
                } else {
                    homeTeam.S--;
                    awayTeam.S--;
                    homeTeam.points -= 1;
                    awayTeam.points -= 1;
                }
            }
            // Untuk kalah mati, membatalkan keputusan adalah lebih kompleks (mengosongkan kemajuan peringkat seterusnya)
            if (match.type === 'knockout' && match.id === 'Final' && match.played) {
                 tournamentData.finalWinner = null;
                 tournamentData.finalRunnerUp = null;
                 tournamentData.finalScore = null;
            } else if (match.type === 'knockout' && (match.id === 'SF1' || match.id === 'SF2') && match.played) {
                const finalMatch = tournamentData.matches.find(m => m.id === 'Final');
                if (finalMatch) {
                    tournamentData.thirdPlaceTeams = tournamentData.thirdPlaceTeams.filter(team => team !== match.loser);
                    match.loser = null; // Clear the loser for this SF match

                    if (match.id === 'SF1') finalMatch.homeTeam = 'Winner SF1';
                    if (match.id === 'SF2') finalMatch.awayTeam = 'Winner SF2';
                    finalMatch.played = false;
                    finalMatch.homeScore = null;
                    finalMatch.awayScore = null;
                    finalMatch.homePenalties = null;
                    finalMatch.awayPenalties = null;
                }
            }
        }

        function sortStandings(groupTeams) {
            return [...groupTeams].sort((a, b) => {
                // 1. Mata (Points)
                if (b.points !== a.points) return b.points - a.points;

                // 2. Perbezaan Gol (Goal Difference)
                if (b.diff !== a.diff) return b.diff - a.diff;

                // 3. Jumlah Jaringan Gol (Goals Scored)
                if (b.J !== a.J) return b.J - a.J;

                // 4. Pasukan Yang Pernah Mengalahkan Lawan (Head-to-Head)
                // This logic needs to handle multiple teams with same points, diff, goals.
                // For simplicity, it currently works best for 2-team ties.
                // For more complex ties, a mini-league among tied teams would be needed.
                const headToHeadMatch = tournamentData.matches.find(m =>
                    m.type === 'group' && m.played &&
                    ((m.homeTeam === a.name && m.awayTeam === b.name) ||
                     (m.homeTeam === b.name && m.awayTeam === a.name))
                );

                if (headToHeadMatch) {
                    if (headToHeadMatch.homeTeam === a.name) {
                        if (headToHeadMatch.homeScore > headToHeadMatch.awayScore) return -1; // A wins head-to-head, A comes first
                        if (headToHeadMatch.homeScore < headToHeadMatch.awayScore) return 1;  // B wins head-to-head, B comes first
                    } else { // homeTeam is b.name
                        if (headToHeadMatch.homeScore > headToHeadMatch.awayScore) return 1;  // B wins head-to-head, B comes first
                        if (headToHeadMatch.homeScore < headToHeadMatch.awayScore) return -1; // A wins head-to-head, A comes first
                    }
                }

                // 5. Fair Play (Lower score is better)
                if (a.fairPlayScore !== b.fairPlayScore) return a.fairPlayScore - b.fairPlayScore;

                // 6. Lentingan Syiling (Coin Toss) - Ultimate tie-breaker, use alphabetical as a consistent fallback.
                return a.name.localeCompare(b.name);
            });
        }

        function renderStandings(groupName) {
            const tableBody = document.getElementById(`group${groupName}-standings-body`);
            if (!tableBody) return;
            tableBody.innerHTML = '';

            // Only render standings if group division is done
            if (!tournamentData.groupDivisionDone) {
                tableBody.innerHTML = `<tr><td colspan="10" style="text-align: center; color: #777; font-style: italic;">Carta kedudukan akan dipaparkan setelah pembahagian kumpulan selesai.</td></tr>`;
                return;
            }

            const sortedTeams = sortStandings(tournamentData.teams[groupName]);
            const allGroupMatchesPlayed = areAllGroupMatchesPlayedInGroup(groupName);

            sortedTeams.forEach((team, index) => {
                const row = tableBody.insertRow();
                let rowClass = '';
                // Highlight top 2 teams ONLY if all group matches have been played
                if (allGroupMatchesPlayed && index < 2) {
                    rowClass = 'qualified';
                }
                row.className = rowClass;

                row.insertCell().textContent = index + 1;
                const teamCell = row.insertCell();
                teamCell.classList.add('team-name');
                teamCell.innerHTML = `<img src="${team.logo}" alt="${team.name} Logo" onerror="this.onerror=null;this.src='https://placehold.co/50x50/cccccc/000000?text=LOGO';"/><span>${team.name}</span>`;
                row.insertCell().textContent = team.P;
                row.insertCell().textContent = team.M;
                row.insertCell().textContent = team.S;
                row.insertCell().textContent = team.K;
                row.insertCell().textContent = team.J;
                row.insertCell().textContent = team.B;
                row.insertCell().textContent = team.diff;
                row.insertCell().textContent = team.points;
            });
        }

        function renderFixtures(groupName) {
            const fixtureContainer = document.getElementById(`group${groupName}-fixtures`);
            if (!fixtureContainer) return;
            fixtureContainer.innerHTML = '';

            // Only render fixtures if group division is done
            if (!tournamentData.groupDivisionDone) {
                fixtureContainer.innerHTML = '<p style="text-align: center; color: #777; font-style: italic; margin-top: 50px;">Jadual perlawanan akan dipaparkan setelah pembahagian kumpulan selesai.</p>';
                return;
            }

            const groupMatches = tournamentData.matches.filter(m => m.group === groupName).sort((a, b) => {
                // Pastikan masa adalah objek Date sebelum membandingkan
                const dateA = new Date(`${a.date}T${a.time}`);
                const dateB = new Date(`${b.date}T${b.time}`);
                return dateA - dateB;
            });

            groupMatches.forEach(match => {
                const matchCard = document.createElement('div');
                matchCard.classList.add('match-card');
                matchCard.classList.add(match.played ? 'played' : 'upcoming');

                // Dapatkan logo pasukan dari allParticipatingTeams
                const getTeamLogoFromAll = (teamName) => {
                    const team = tournamentData.allParticipatingTeams.find(t => t.name === teamName);
                    return team ? team.logo : 'https://placehold.co/50x50/cccccc/000000?text=LOGO';
                };

                const homeLogo = getTeamLogoFromAll(match.homeTeam);
                const awayLogo = getTeamLogoFromAll(match.awayTeam);

                let homeScoreDisplay = match.homeScore !== null ? match.homeScore : '';
                let awayScoreDisplay = match.awayScore !== null ? match.awayScore : '';
                let penaltyDisplay = '';

                let homeScoreClass = '';
                let awayScoreClass = '';

                if (match.played) {
                    if (match.homeScore > match.awayScore) {
                        homeScoreClass = 'winning-score';
                    } else if (match.homeScore < match.awayScore) {
                        awayScoreClass = 'winning-score';
                    } else if (match.type === 'knockout' && match.homePenalties !== null && match.awayPenalties !== null) {
                        if (match.homePenalties > match.awayPenalties) {
                            homeScoreClass = 'winning-score';
                        } else if (match.homePenalties < match.awayPenalties) {
                            awayScoreClass = 'winning-score';
                        }
                        penaltyDisplay = `<div class="score-penalties">(Penalti: ${match.homePenalties} - ${match.awayPenalties})</div>`;
                    }
                }

                // Generate match details (goals, cards) for home team
                const homeMatchDetailsHtml = `
                    <div class="team-event-list home-events">
                        ${match.homeGoals.map(g => `<div class="goal"><span class="goal-icon">⚽</span> ${g.player} (Jersi: ${g.jersey}) ${g.minute}'</div>`).join('')}
                        ${match.homeYellowCards.map(c => `<div class="card"><span class="yellow-card-icon">🟨</span> ${c.player} (Jersi: ${c.jersey}) ${c.minute}'</div>`).join('')}
                        ${match.homeRedCards.map(c => `<div class="card"><span class="red-card-icon">🟥</span> ${c.player} (Jersi: ${c.jersey}) ${c.minute}'</div>`).join('')}
                    </div>
                `;
                // Generate match details (goals, cards) for away team
                const awayMatchDetailsHtml = `
                    <div class="team-event-list away-events">
                        ${match.awayGoals.map(g => `<div class="goal"><span class="goal-icon">⚽</span> ${g.player} (Jersi: ${g.jersey}) ${g.minute}'</div>`).join('')}
                        ${match.awayYellowCards.map(c => `<div class="card"><span class="yellow-card-icon">🟨</span> ${c.player} (Jersi: ${c.jersey}) ${c.minute}'</div>`).join('')}
                        ${match.awayRedCards.map(c => `<div class="card"><span class="red-card-icon">🟥</span> ${c.player} (Jersi: ${c.jersey}) ${c.minute}'</div>`).join('')}
                    </div>
                `;

                matchCard.innerHTML = `
                    <div class="match-date-time">${match.date} ${match.time}</div>
                    <div class="teams-line">
                        <span class="team-name-display">
                            <img src="${homeLogo}" alt="${match.homeTeam} Logo" onerror="this.onerror=null;this.src='https://placehold.co/50x50/cccccc/000000?text=LOGO';"/> ${match.homeTeam}
                        </span>
                        <span class="vs">vs</span>
                        <span class="team-name-display">
                            ${match.awayTeam} <img src="${awayLogo}" alt="${awayLogo} Logo" onerror="this.onerror=null;this.src='https://placehold.co/50x50/cccccc/000000?text=LOGO';"/>
                        </span>
                    </div>
                    <div class="scores-line">
                        <span class="score ${homeScoreClass}">${match.played ? homeScoreDisplay : ''}</span>
                        <span class="score ${awayScoreClass}">${match.played ? awayScoreDisplay : ''}</span>
                    </div>
                    ${penaltyDisplay}
                    <div class="match-events-container">
                        <div class="home-events-column">
                            ${homeMatchDetailsHtml}
                        </div>
                        <div class="away-events-column">
                            ${awayMatchDetailsHtml}
                        </div>
                    </div>
                `;
                fixtureContainer.appendChild(matchCard);
            });
        }

        function areAllGroupMatchesPlayedInGroup(groupName) {
            const groupMatches = tournamentData.matches.filter(m => m.type === 'group' && m.group === groupName);
            // Jika tiada perlawanan kumpulan, ia tidak dianggap "semua dimainkan"
            if (groupMatches.length === 0) {
                return false;
            }
            return groupMatches.every(m => m.played);
        }

        function updateKnockoutBracket() {
            const bracketContainer = document.getElementById('knockout-bracket');
            if (!bracketContainer) return;
            bracketContainer.innerHTML = '';

            // Check if all group matches are played before populating the bracket automatically
            const allGroupMatchesPlayed = areAllGroupMatchesPlayedInGroup('A') && areAllGroupMatchesPlayedInGroup('B');

            if (!allGroupMatchesPlayed) {
                bracketContainer.innerHTML = '<p style="text-align: center; color: #777; font-style: italic; margin-top: 50px;">Carta Kalah Mati akan dipaparkan setelah semua perlawanan peringkat kumpulan selesai dimasukkan skor.</p>';
                return;
            }

            const qualifiedA = sortStandings(tournamentData.teams.A).filter(t => t.qualified);
            const qualifiedB = sortStandings(tournamentData.teams.B).filter(t => t.qualified);

            if (qualifiedA.length < 2 || qualifiedB.length < 2) {
                bracketContainer.innerHTML = '<p style="text-align: center; color: #777; font-style: italic; margin-top: 50px;">Tidak cukup pasukan yang layak dari peringkat kumpulan untuk menjana peringkat kalah mati (perlukan 2 dari setiap kumpulan).</p>';
                return;
            }

            // Ensure knockout matches exist, if not, create default ones with correct teams
            let sf1 = tournamentData.matches.find(m => m.id === 'SF1');
            let sf2 = tournamentData.matches.find(m => m.id === 'SF2');
            let finalMatch = tournamentData.matches.find(m => m.id === 'Final');

            if (!sf1 || !sf2 || !finalMatch) {
                // If they don't exist, create them with default times and qualified teams
                addDefaultKnockoutMatches(); // This will create them with placeholder times
                // Now retrieve them again as they've been added
                sf1 = tournamentData.matches.find(m => m.id === 'SF1');
                sf2 = tournamentData.matches.find(m => m.id === 'SF2');
                finalMatch = tournamentData.matches.find(m => m.id === 'Final');
            }

            // Always update home/away teams for SF based on qualified teams
            sf1.homeTeam = qualifiedA[0].name;
            sf1.awayTeam = qualifiedB[1].name;

            sf2.homeTeam = qualifiedB[0].name;
            sf2.awayTeam = qualifiedA[1].name;

            // Dapatkan logo pasukan (dari allParticipatingTeams)
            const getTeamLogo = (teamName) => {
                const team = tournamentData.allParticipatingTeams.find(t => t.name === teamName);
                return team ? team.logo : 'https://placehold.co/50x50/cccccc/000000?text=LOGO';
            };

            // Fungsi pembantu untuk memaparkan nama pasukan atau placeholder dengan gaya
            const renderTeamNameWithLogo = (teamName) => {
                const isPlaceholder = teamName.includes('Winner Group') || teamName.includes('Runner-up Group') || teamName.includes('Winner SF');
                const teamLogo = getTeamLogo(teamName);
                const teamClass = isPlaceholder ? 'placeholder-team' : '';
                return `<span class="team-name ${teamClass}"><img src="${teamLogo}" alt="${teamName} Logo" onerror="this.onerror=null;this.src='https://placehold.co/50x50/cccccc/000000?text=LOGO';"/> ${teamName}</span>`;
            };


            // Paparkan Separuh Akhir
            const semiFinalRound = document.createElement('div');
            semiFinalRound.className = 'bracket-round';
            semiFinalRound.innerHTML = '<h3>Separuh Akhir</h3>';
            [sf1, sf2].forEach(match => {
                const matchDiv = document.createElement('div');
                matchDiv.className = 'bracket-match';
                let scoreDisplay = match.played ? `${match.homeScore} - ${match.awayScore}` : 'vs';
                if (match.played && match.homePenalties !== null && match.awayPenalties !== null) {
                    scoreDisplay += `<br>(Penalti: ${match.homePenalties} - ${match.awayPenalties})`;
                }

                matchDiv.innerHTML = `
                    ${renderTeamNameWithLogo(match.homeTeam)}
                    <p class="score">${scoreDisplay}</p>
                    ${renderTeamNameWithLogo(match.awayTeam)}
                    <p class="date">${match.date} ${match.time}</p>
                `;
                semiFinalRound.appendChild(matchDiv);
            });
            bracketContainer.appendChild(semiFinalRound);

            // Paparkan Akhir (satu perlawanan)
            const finalRound = document.createElement('div');
            finalRound.className = 'bracket-round';
            finalRound.innerHTML = '<h3>Akhir</h3>';
            const finalMatchDiv = document.createElement('div');
            finalMatchDiv.className = 'bracket-match final-match';
            let finalScoreDisplay = finalMatch.played ? `${finalMatch.homeScore} - ${finalMatch.awayScore}` : 'vs';
            if (finalMatch.played && finalMatch.homePenalties !== null && finalMatch.awayPenalties !== null) {
                finalScoreDisplay += `<br>(Penalti: ${finalMatch.homePenalties} - ${finalMatch.awayPenalties})`;
            }

            finalMatchDiv.innerHTML = `
                ${renderTeamNameWithLogo(finalMatch.homeTeam)}
                <p class="score">${finalScoreDisplay}</p>
                ${renderTeamNameWithLogo(finalMatch.awayTeam)}
                <p class="date">${finalMatch.date} ${finalMatch.time}</p>
            `;
            finalRound.appendChild(finalMatchDiv);
            bracketContainer.appendChild(finalRound);
        }

        function updateFinalResult() {
            const finalWinnerTeamEl = document.getElementById('final-winner-team');
            const finalWinnerLogoEl = document.getElementById('final-winner-logo');
            const finalRunnerUpTeamEl = document.getElementById('final-runner-up-team');
            const finalRunnerUpLogoEl = document.getElementById('final-runner-up-logo');
            const thirdPlaceTeamsContainer = document.getElementById('third-place-teams-container');


            const getTeamLogo = (teamName) => {
                const team = tournamentData.allParticipatingTeams.find(t => t.name === teamName);
                return team ? team.logo : 'https://placehold.co/100x100/cccccc/000000?text=LOGO';
            };

            // Update Champion
            if (tournamentData.finalWinner) {
                finalWinnerTeamEl.textContent = tournamentData.finalWinner;
                finalWinnerLogoEl.src = getTeamLogo(tournamentData.finalWinner);
                finalWinnerLogoEl.alt = `${tournamentData.finalWinner} Logo`;
            } else {
                finalWinnerTeamEl.textContent = 'Belum Ditentukan';
                finalWinnerLogoEl.src = 'https://placehold.co/100x100/cccccc/000000?text=JUARA';
                finalWinnerLogoEl.alt = 'Juara Logo';
            }

            // Update Runner-up
            if (tournamentData.finalRunnerUp) {
                finalRunnerUpTeamEl.textContent = tournamentData.finalRunnerUp;
                finalRunnerUpLogoEl.src = getTeamLogo(tournamentData.finalRunnerUp);
                finalRunnerUpLogoEl.alt = `${tournamentData.finalRunnerUp} Logo`;
            } else {
                finalRunnerUpTeamEl.textContent = 'Belum Ditentukan';
                finalRunnerUpLogoEl.src = 'https://placehold.co/100x100/cccccc/000000?text=NAIB';
                finalRunnerUpLogoEl.alt = 'Naib Juara Logo';
            }

            // Update Third Place (Joint)
            thirdPlaceTeamsContainer.innerHTML = ''; // Clear previous content
            if (tournamentData.thirdPlaceTeams && tournamentData.thirdPlaceTeams.length === 2) { // Only display if exactly two teams
                // Sort third place teams alphabetically for consistent display
                const sortedThirdPlaceTeams = [...tournamentData.thirdPlaceTeams].sort((a, b) => a.localeCompare(b));

                sortedThirdPlaceTeams.forEach(teamName => {
                    const teamCard = document.createElement('div');
                    teamCard.classList.add('third-place-card');
                    teamCard.innerHTML = `
                        <img src="${getTeamLogo(teamName)}" alt="${teamName} Logo" onerror="this.onerror=null;this.src='https://placehold.co/60x60/cccccc/000000?text=LOGO';"/>
                        <h4>${teamName}</h4>
                    `;
                    thirdPlaceTeamsContainer.appendChild(teamCard);
                });
            } else {
                thirdPlaceTeamsContainer.innerHTML = '<p style="text-align: center; color: #777; font-style: italic; width: 100%;">Belum Ditentukan</p>';
            }

            // Existing individual awards update remains the same
            document.getElementById('best-player-name').textContent = tournamentData.bestPlayer || 'Belum Ditentukan';
            document.getElementById('best-player-school').textContent = tournamentData.bestPlayerSchool || 'Belum Ditentukan';
            document.getElementById('best-goalkeeper-name').textContent = tournamentData.bestGoalkeeper || 'Belum Ditentukan';
            document.getElementById('best-goalkeeper-school').textContent = tournamentData.bestGoalkeeperSchool || 'Belum Ditentukan';
            document.getElementById('top-scorer-name').textContent = tournamentData.topScorer || 'Belum Ditentukan';
            document.getElementById('top-scorer-school').textContent = tournamentData.topScorerSchool || 'Belum Ditentukan';
        }

        function updateLatestMatchUpdates() {
            const latestUpdatesText = document.getElementById('latest-match-update-text');
            if (tournamentData.lastUpdatedMatch && tournamentData.lastUpdatedMatch.played) {
                let scoreInfo = `${tournamentData.lastUpdatedMatch.homeScore} - ${tournamentData.lastUpdatedMatch.awayScore}`;
                if (tournamentData.lastUpdatedMatch.type === 'knockout' && tournamentData.lastUpdatedMatch.homePenalties !== null) {
                    scoreInfo += ` (Penalti: ${tournamentData.lastUpdatedMatch.homePenalties} - ${tournamentData.lastUpdatedMatch.awayPenalties})`;
                }
                latestUpdatesText.innerHTML = `
                    <strong>${tournamentData.lastUpdatedMatch.homeTeam} ${scoreInfo} ${tournamentData.lastUpdatedMatch.awayTeam}</strong> (${tournamentData.lastUpdatedMatch.type === 'group' ? 'Peringkat Kumpulan' : 'Peringkat Kalah Mati'})
                `;
            } else {
                latestUpdatesText.textContent = 'Tiada kemas kini perlawanan terkini.';
            }
        }

        function renderParticipatingTeams() {
            const teamListDiv = document.getElementById('participating-teams-list');
            if (!teamListDiv) return;
            teamListDiv.innerHTML = '';

            // Paparkan pasukan dari allParticipatingTeams
            const allTeams = [...tournamentData.allParticipatingTeams].sort((a, b) => a.name.localeCompare(b.name));
            document.getElementById('total-teams-count').textContent = allTeams.length;

            if (allTeams.length === 0) {
                teamListDiv.innerHTML = '<p style="text-align: center; color: #777; font-style: italic; width: 100%;">Tiada pasukan yang didaftarkan lagi. Sila tambah pasukan melalui Panel Admin.</p>';
                return;
            }

            allTeams.forEach(team => {
                const teamCard = document.createElement('div');
                teamCard.classList.add('team-card');
                teamCard.innerHTML = `
                    <img src="${team.logo}" alt="${team.name} Logo" onerror="this.onerror=null;this.src='https://placehold.co/50x50/cccccc/000000?text=LOGO';"/>
                    <h4>${team.name}</h4>
                `;

                // Check if manager info is updated and players are filled
                const isManagerInfoUpdated = team.managerName !== 'Pengurus Belum Ditetapkan' &&
                                             team.managerPhone !== 'N/A' &&
                                             team.players &&
                                             team.players.length >= MIN_PLAYERS &&
                                             team.players.every(player => player.name.trim() !== '' && player.jerseyNo.trim() !== ''); // Removed idCard check

                if (isManagerInfoUpdated) {
                    const infoLink = document.createElement('span');
                    infoLink.classList.add('team-info-link');
                    infoLink.textContent = 'Lihat Info';
                    infoLink.onclick = () => showTeamDetails(team.name);
                    teamCard.appendChild(infoLink);
                }

                teamListDiv.appendChild(teamCard);
            });
        }

        // --- Anugerah Individu ---
        function loadIndividualAwards() {
            document.getElementById('best-player-input').value = tournamentData.bestPlayer || '';
            document.getElementById('best-player-school-input').value = tournamentData.bestPlayerSchool || '';
            document.getElementById('best-goalkeeper-input').value = tournamentData.bestGoalkeeper || '';
            document.getElementById('best-goalkeeper-school-input').value = tournamentData.bestGoalkeeperSchool || '';
            document.getElementById('top-scorer-input').value = tournamentData.topScorer || '';
            document.getElementById('top-scorer-school-input').value = tournamentData.topScorerSchool || '';
        }

        function updateIndividualAwards() {
            const bestPlayer = document.getElementById('best-player-input').value.trim();
            const bestPlayerSchool = document.getElementById('best-player-school-input').value.trim();
            const bestGoalkeeper = document.getElementById('best-goalkeeper-input').value.trim();
            const bestGoalkeeperSchool = document.getElementById('best-goalkeeper-school-input').value.trim();
            const topScorer = document.getElementById('top-scorer-input').value.trim();
            const topScorerSchool = document.getElementById('top-scorer-school-input').value.trim();

            if (!bestPlayer && !bestPlayerSchool && !bestGoalkeeper && !bestGoalkeeperSchool && !topScorer && !topScorerSchool) {
                showToast('Sila masukkan sekurang-kurangnya satu anugerah untuk dikemas kini.', 'warning');
                return;
            }

            tournamentData.bestPlayer = bestPlayer || null;
            tournamentData.bestPlayerSchool = bestPlayerSchool || null;
            tournamentData.bestGoalkeeper = bestGoalkeeper || null;
            tournamentData.bestGoalkeeperSchool = bestGoalkeeperSchool || null;
            tournamentData.topScorer = topScorer || null;
            tournamentData.topScorerSchool = topScorerSchool || null;

            showToast('Anugerah individu berjaya dikemas kini!', 'success');
            updateAllViews();
        }

        // Function to update the header logo
        function updateHeaderLogo() {
            const headerLogoFile = document.getElementById('header-logo-file');
            if (headerLogoFile.files.length > 0) {
                const file = headerLogoFile.files[0];
                const reader = new FileReader();
                reader.onload = (e) => {
                    tournamentData.headerLogo = e.target.result;
                    document.getElementById('header-logo-img').src = tournamentData.headerLogo;
                    document.getElementById('nav-mobile-logo-display').src = tournamentData.headerLogo; // Update mobile nav logo
                    showToast('Logo header berjaya dikemas kini!', 'success');
                    saveState();
                };
                reader.onerror = () => {
                    showToast('Gagal membaca fail logo header. Menggunakan logo lalai.', 'warning');
                    tournamentData.headerLogo = 'https://placehold.co/80x80/007bff/ffffff?text=LOGO';
                    document.getElementById('header-logo-img').src = tournamentData.headerLogo;
                    document.getElementById('nav-mobile-logo-display').src = tournamentData.headerLogo; // Update mobile nav logo
                    saveState();
                };
                reader.readAsDataURL(file);
            } else {
                showToast('Sila pilih fail logo untuk dimuat naik.', 'error');
            }
        }


        function updateAllViews() {
            renderStandings('A');
            renderStandings('B');
            renderFixtures('A');
            renderFixtures('B');
            updateQualifiedTeams(); // Call this before updating knockout bracket
            updateKnockoutBracket();
            updateFinalResult();
            updateLatestMatchUpdates();
            renderParticipatingTeams();
            updateCountdownDisplay();
            // Update header logo on view update
            document.getElementById('header-logo-img').src = tournamentData.headerLogo;
            document.getElementById('nav-mobile-logo-display').src = tournamentData.headerLogo; // Update mobile nav logo
            saveState();

            // Update visibility of manager tab based on login role
            const managerTabLink = document.getElementById('manager-tab-link');
            const mobileManagerTabLink = document.getElementById('mobile-manager-tab-link');
            if (loggedInUser.role === 'manager') {
                managerTabLink.style.display = 'block';
                mobileManagerTabLink.style.display = 'block';
            } else {
                managerTabLink.style.display = 'none';
                mobileManagerTabLink.style.display = 'none';
            }
        }

        function updateQualifiedTeams() {
            // Reset qualified status for all teams first
            for (const groupKey in tournamentData.teams) {
                tournamentData.teams[groupKey].forEach(team => {
                    team.qualified = false;
                });
            }

            if (areAllGroupMatchesPlayedInGroup('A') && areAllGroupMatchesPlayedInGroup('B')) {
                const sortedA = sortStandings(tournamentData.teams.A);
                const sortedB = sortStandings(tournamentData.teams.B);

                if (sortedA.length >= 2) {
                    const teamA1 = tournamentData.teams.A.find(t => t.name === sortedA[0].name);
                    const teamA2 = tournamentData.teams.A.find(t => t.name === sortedA[1].name);
                    if (teamA1) teamA1.qualified = true;
                    if (teamA2) teamA2.qualified = true;
                }
                if (sortedB.length >= 2) {
                    const teamB1 = tournamentData.teams.B.find(t => t.name === sortedB[0].name);
                    const teamB2 = tournamentData.teams.B.find(t => t.name === sortedB[1].name);
                    if (teamB1) teamB1.qualified = true;
                    if (teamB2) teamB2.qualified = true;
                }
            }
        }

        // The seedKnockoutBracketLogic function is no longer directly called by a button.
        // Its core logic (assigning qualified teams to SF1/SF2) is now part of updateKnockoutBracket()
        // which is called by updateAllViews().
        // The `addDefaultKnockoutMatches()` function is used to ensure SF/Final matches exist initially
        // or when resetting the bracket.

        // --- Fungsi Modal Pengesahan Tersuai ---
        let globalConfirmationCallback = null;

        function showConfirmationModal(message, callback) {
            const modalOverlay = document.getElementById('confirmation-modal-overlay');
            const modalMessage = document.getElementById('modal-message');
            const confirmBtn = document.getElementById('modal-confirm-btn');
            const cancelBtn = document.getElementById('modal-cancel-btn');

            modalMessage.textContent = message;
            globalConfirmationCallback = callback;

            confirmBtn.onclick = () => {
                modalOverlay.classList.remove('show');
                if (globalConfirmationCallback) globalConfirmationCallback(true);
            };
            cancelBtn.onclick = () => {
                modalOverlay.classList.remove('show');
                if (globalConfirmationCallback) globalConfirmationCallback(false);
            };

            modalOverlay.classList.add('show');
        }

        // --- Fungsi Modal Info Pasukan ---
        function showTeamDetails(teamName) {
            const team = tournamentData.allParticipatingTeams.find(t => t.name === teamName);
            if (!team) {
                showToast('Maklumat pasukan tidak ditemui.', 'error');
                return;
            }

            const modalOverlay = document.getElementById('team-info-modal-overlay');
            const modalLogo = document.getElementById('team-info-modal-logo');
            const modalTeamName = document.getElementById('team-info-modal-team-name');
            const managerNameEl = document.getElementById('team-info-manager-name');
            const managerPhoneEl = document.getElementById('team-info-manager-phone');
            const playerListBody = document.getElementById('team-info-player-list-body');
            const closeBtn = document.getElementById('team-info-modal-close-btn');

            // Set modal header with logo and team name
            modalLogo.src = team.logo;
            modalLogo.alt = `${team.name} Logo`;
            modalTeamName.textContent = team.name;

            managerNameEl.textContent = team.managerName;
            managerPhoneEl.textContent = team.managerPhone;

            playerListBody.innerHTML = ''; // Clear existing player list
            if (team.players && team.players.length > 0) {
                team.players.forEach((player, index) => {
                    const row = playerListBody.insertRow();
                    row.innerHTML = `
                        <td>${index + 1}</td>
                        <td>${player.name}</td>
                        <td>${player.jerseyNo}</td>
                    `;
                });
            } else {
                playerListBody.innerHTML = `<tr><td colspan="3" style="text-align: center; color: #777; font-style: italic;">Tiada maklumat pemain.</td></tr>`; // Adjusted colspan
            }

            closeBtn.onclick = () => {
                modalOverlay.classList.remove('show');
            };

            modalOverlay.classList.add('show');
        }


        // --- Fungsi Cetak ---
        function printTab(tabId) {
            const printContents = document.getElementById(tabId).outerHTML; // Get outerHTML to include the tab-content div itself
            const originalBody = document.body.innerHTML; // Simpan kandungan asal body

            // Buat elemen baru untuk cetakan
            const printWindow = window.open('', '_blank');
            printWindow.document.write('<html><head><title>Cetak Laporan</title>');
            // Salin gaya dari dokumen asal
            document.querySelectorAll('style, link[rel="stylesheet"]').forEach(node => {
                printWindow.document.write(node.outerHTML);
            });
            printWindow.document.write('</head><body>');
            // Wrap the content in a container to apply print styles consistently
            printWindow.document.write('<div class="container">' + printContents + '</div>');
            printWindow.document.close();

            // Sembunyikan butang cetak dalam tetingkap cetakan
            const printButtons = printWindow.document.querySelectorAll('.print-button');
            printButtons.forEach(button => {
                button.style.display = 'none';
            });


            printWindow.focus();
            printWindow.print();
            printWindow.close();
        }


        // Muatan awal apabila DOM siap
        document.addEventListener('DOMContentLoaded', () => {
            initializeData();
            updateAllViews();

            // Activate last active tab or default to home
            const lastActiveTabId = localStorage.getItem(LAST_ACTIVE_TAB_KEY);
            if (lastActiveTabId) {
                const lastActiveTabLink = document.querySelector(`.tab-link[data-tab="${lastActiveTabId}"]`);
                if (lastActiveTabLink) {
                    lastActiveTabLink.click(); // Simulate click to activate tab and trigger logic
                } else {
                    document.querySelector('.tab-link[data-tab="home"]').click(); // Fallback to home
                }
            } else {
                document.querySelector('.tab-link[data-tab="home"]').click(); // Default to home
            }

            // Initial render of login panel (will redirect if already logged in)
            renderLoginPanel();

            // Event Listeners
            document.getElementById('loginBtn').addEventListener('click', login);
            document.getElementById('logoutAdminBtn').addEventListener('click', logout); // Admin logout
            document.getElementById('updateMatchResultBtn').addEventListener('click', updateMatchResult);
            document.getElementById('resetDataBtn').addEventListener('click', () => {
                showConfirmationModal('Adakah anda pasti ingin menetapkan semula semua data kejohanan? Ini tidak boleh diterbalikkan!', (confirmed) => {
                    if (confirmed) {
                        tournamentData = {
                            allParticipatingTeams: [
                                { name: 'KL Saracens', logo: 'https://placehold.co/50x50/cccccc/000000?text=KL', managerUsername: 'klsaracens', managerPassword: 'password', managerName: 'Ahmad Bin Ali', managerPhone: '012-3456789', players: generateDefaultPlayers('KL Saracens'), isManagerInfoUpdated: false, fairPlayScore: Math.floor(Math.random() * 10) },
                                { name: 'PJ Phoenix', logo: 'https://placehold.co/50x50/cccccc/000000?text=PJ', managerUsername: 'pjphoenix', managerPassword: 'password', managerName: 'Siti Aminah', managerPhone: '013-1234567', players: generateDefaultPlayers('PJ Phoenix'), isManagerInfoUpdated: false, fairPlayScore: Math.floor(Math.random() * 10) },
                                { name: 'Subang Wolves', logo: 'https://placehold.co/50x50/cccccc/000000?text=SW', managerUsername: 'subangwolves', managerPassword: 'password', managerName: 'Chong Wei', managerPhone: '014-9876543', players: generateDefaultPlayers('Subang Wolves'), isManagerInfoUpdated: false, fairPlayScore: Math.floor(Math.random() * 10) },
                                { name: 'Gombak Gladiators', logo: 'https://placehold.co/50x50/cccccc/000000?text=GG', managerUsername: 'gombakg', managerPassword: 'password', managerName: 'Muthu Kumar', managerPhone: '019-1122334', players: generateDefaultPlayers('Gombak Gladiators'), isManagerInfoUpdated: false, fairPlayScore: Math.floor(Math.random() * 10) },
                                { name: 'Johor Jaguars', logo: 'https://placehold.co/50x50/cccccc/000000?text=JJ', managerUsername: 'johorj', managerPassword: 'password', managerName: 'Fatima Zahra', managerPhone: '011-2233445', players: generateDefaultPlayers('Johor Jaguars'), isManagerInfoUpdated: false, fairPlayScore: Math.floor(Math.random() * 10) },
                                { name: 'Melaka Mavericks', logo: 'https://placehold.co/50x50/cccccc/000000?text=MM', managerUsername: 'melakam', managerPassword: 'password', managerName: 'Lim Ah Seng', managerPhone: '016-5566778', players: generateDefaultPlayers('Melaka Mavericks'), isManagerInfoUpdated: false, fairPlayScore: Math.floor(Math.random() * 10) },
                                { name: 'Kedah Knights', logo: 'https://placehold.co/50x50/cccccc/000000?text=KK', managerUsername: 'kedahk', managerPassword: 'password', managerName: 'Nurul Huda', managerPhone: '017-8899001', players: generateDefaultPlayers('Kedah Knights'), isManagerInfoUpdated: false, fairPlayScore: Math.floor(Math.random() * 10) },
                                { name: 'Penang Piranhas', logo: 'https://placehold.co/50x50/cccccc/000000?text=PP', managerUsername: 'penangp', managerPassword: 'password', managerName: 'David Lee', managerPhone: '018-3344556', players: generateDefaultPlayers('Penang Piranhas'), isManagerInfoUpdated: false, fairPlayScore: Math.floor(Math.random() * 10) }
                            ],
                            teams: { 'A': [], 'B': [] },
                            matches: [],
                            lastUpdatedMatch: null,
                            finalWinner: null,
                            finalRunnerUp: null,
                            thirdPlaceTeams: [],
                            finalScore: null,
                            bestPlayer: null,
                            bestPlayerSchool: null,
                            bestGoalkeeper: null,
                            bestGoalkeeperSchool: null,
                            topScorer: null,
                            topScorerSchool: null,
                            countdownStartTime: null,
                            countdownEndTime: null,
                            groupDivisionDone: false,
                            knockoutBracketGenerated: false,
                            enableExtraTime: false,
                            headerLogo: 'https://placehold.co/80x80/007bff/ffffff?text=LOGO'
                        };
                        loggedInUser = { role: null, teamName: null }; // Reset login state
                        saveState();
                        initializeData(); // Re-initialize to set up default teams etc.
                        updateAllViews();
                        renderLoginPanel(); // Go back to login screen
                        showToast('Semua data kejohanan telah ditetapkan semula.', 'info');
                    } else {
                        showToast('Pembatalan penetapan semula data.', 'info');
                    }
                });
            });

            document.getElementById('edit-knockout-match-select').addEventListener('change', loadKnockoutMatchDetailsForEdit);
            document.getElementById('saveKnockoutMatchDetailsBtn').addEventListener('click', saveKnockoutMatchDetails);
            document.getElementById('resetKnockoutBracketBtn').addEventListener('click', resetKnockoutBracket);
            document.getElementById('enable-extra-time').addEventListener('change', toggleExtraTime);
            document.getElementById('updateKnockoutFixtureDatesBtn').addEventListener('click', updateKnockoutFixtureDates);
            document.getElementById('renameTeamBtn').addEventListener('click', renameTeam);
            document.getElementById('addTeamBtn').addEventListener('click', addTeam);
            document.getElementById('removeTeamBtn').addEventListener('click', showRemoveTeamConfirmation);
            document.getElementById('updateIndividualAwardsBtn').addEventListener('click', updateIndividualAwards);
            document.getElementById('startGroupDivisionAndGenerateFixturesBtn').addEventListener('click', startGroupDivisionAndGenerateFixtures);
            document.getElementById('updateHeaderLogoBtn').addEventListener('click', updateHeaderLogo);

            // Manager Panel specific listeners
            document.getElementById('saveTeamInfoBtn').addEventListener('click', saveTeamInfo);
            document.getElementById('addPlayerBtn').addEventListener('click', addPlayer);
            document.getElementById('savePlayersBtn').addEventListener('click', savePlayers);


            // Mula kiraan detik secara automatik jika masa ditetapkan
            if (tournamentData.countdownStartTime) {
                clearInterval(countdownInterval); // Clear any existing interval
                updateCountdownDisplay(); // Call once immediately
                countdownInterval = setInterval(updateCountdownDisplay, 1000); // Update every second
            }
        });
    </script>
</body>
</html>
